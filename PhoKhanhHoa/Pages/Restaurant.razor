@page "/restaurant"
@inject IDbContext _dbContext
@inject Saas.App _app

<h1>Restaurants</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (_rests == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th>Restaurant</th>
        <th>Location</th>
        <th>Unit</th>
        <th>Street Name</th>
        <th>Phone</th>
        <th>Link</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var _rest in _rests.Values)
      {
        <tr>
          <td>@_rest.Name</td>
          <td>@_rest.RestaurantLocationName</td>
          <td>@_rest.LocationUnit</td>
          <td>@_rest.LocationStreetName</td>
          <td>@_rest.RestaurantLocationPhoneNumber</td>
          <td><a href="@_rest.LocationLink" class="material-icons" style="font-size:24px;color:blue">add_location</a></td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  [CascadingParameter]
  protected Task<AuthenticationState> AuthState { get; set; }

  private Saas.Message.Administrator.Restaurants _rests;

  protected override async Task OnInitializedAsync()
  {
    var cp = (await AuthState).User;

    using var sp = _dbContext.Read<Saas.Message.Administrator.Restaurant>(_app.RefDatas.AppSetting.Id, cp, OperationType.R);
    _rests = (sp.IsReady) ? new Saas.Message.Administrator.Restaurants(sp.Read("pho")) : null;
  }
}