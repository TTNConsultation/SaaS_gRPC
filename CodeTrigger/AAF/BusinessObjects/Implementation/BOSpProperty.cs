/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSpProperty.
	///</Summary>
	public partial class BOSpProperty : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _id;
		protected string _fullName;
		protected string _schema;
		protected string _type;
		protected string _op;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSpProperty()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSpProperty
		///</parameters>
		protected internal BOSpProperty(DAOSpProperty daoSpProperty)
		{
			try
			{
				_id = daoSpProperty.Id;
				_fullName = daoSpProperty.FullName;
				_schema = daoSpProperty.Schema;
				_type = daoSpProperty.Type;
				_op = daoSpProperty.Op;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///SpPropertyCollection
		///This method returns the collection of BOSpProperty objects
		///</Summary>
		///<returns>
		///List[BOSpProperty]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSpProperty> SpPropertyCollection()
		{
			try
			{
				IList<BOSpProperty> boSpPropertyCollection = new List<BOSpProperty>();
				IList<DAOSpProperty> daoSpPropertyCollection = DAOSpProperty.SelectAll();
			
				foreach(DAOSpProperty daoSpProperty in daoSpPropertyCollection)
					boSpPropertyCollection.Add(new BOSpProperty(daoSpProperty));
			
				return boSpPropertyCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SpPropertyCollectionCount
		///This method returns the collection count of BOSpProperty objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SpPropertyCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSpProperty.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSpProperty>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSpProperty.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SpPropertyCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSpProperty objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSpPropertyCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSpProperty> daoSpPropertyCollection = DAOSpProperty.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSpProperty resdaoSpProperty in daoSpPropertyCollection)
					boSpPropertyCollection.Add((T)(object)new BOSpProperty(resdaoSpProperty));
			
				return boSpPropertyCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SpPropertyCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSpProperty objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSpProperty.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string FullName
		{
			get
			{
				 return _fullName;
			}
			set
			{
				_fullName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Schema
		{
			get
			{
				 return _schema;
			}
			set
			{
				_schema = value;
				_isDirty = true;
			}
		}
		
		public virtual string Type
		{
			get
			{
				 return _type;
			}
			set
			{
				_type = value;
				_isDirty = true;
			}
		}
		
		public virtual string Op
		{
			get
			{
				 return _op;
			}
			set
			{
				_op = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
