/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOKey.
	///It maintains a collection of BOEnglish,BOFrench,BOVietnamese objects.
	///</Summary>
	public partial class BOKey : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _key;
		protected byte? _type;
		protected Int32? _rootId;
		protected Int32? _objectId;
		protected Int32? _id;
		protected string _keyName;
		protected string _code;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOEnglish> _boEnglishCollection;
		List<BOFrench> _boFrenchCollection;
		List<BOVietnamese> _boVietnameseCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOKey()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 key
		///</parameters>
		public BOKey(Int32 key)
		{
			try
			{
				DAOKey daoKey = DAOKey.SelectOne(key);
				_key = daoKey.Key;
				_type = daoKey.Type;
				_rootId = daoKey.RootId;
				_objectId = daoKey.ObjectId;
				_id = daoKey.Id;
				_keyName = daoKey.KeyName;
				_code = daoKey.Code;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///Constructor using unique field(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Code
		///</parameters>
		public BOKey(string code)
		{
			try
			{
				DAOKey daoKey = DAOKey.SelectOneByCode(code);
				_key = daoKey.Key;
				_type = daoKey.Type;
				_rootId = daoKey.RootId;
				_objectId = daoKey.ObjectId;
				_id = daoKey.Id;
				_keyName = daoKey.KeyName;
				_code = daoKey.Code;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOKey
		///</parameters>
		protected internal BOKey(DAOKey daoKey)
		{
			try
			{
				_key = daoKey.Key;
				_type = daoKey.Type;
				_rootId = daoKey.RootId;
				_objectId = daoKey.ObjectId;
				_id = daoKey.Id;
				_keyName = daoKey.KeyName;
				_code = daoKey.Code;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Key record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOKey daoKey = new DAOKey();
			RegisterDataObject(daoKey);
			BeginTransaction("savenewBOKey");
			try
			{
				daoKey.Type = _type;
				daoKey.RootId = _rootId;
				daoKey.ObjectId = _objectId;
				daoKey.Id = _id;
				daoKey.KeyName = _keyName;
				daoKey.Code = _code;
				daoKey.Insert();
				CommitTransaction();
				
				_key = daoKey.Key;
				_type = daoKey.Type;
				_rootId = daoKey.RootId;
				_objectId = daoKey.ObjectId;
				_id = daoKey.Id;
				_keyName = daoKey.KeyName;
				_code = daoKey.Code;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOKey");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Key record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOKey
		///</parameters>
		public virtual void Update()
		{
			DAOKey daoKey = new DAOKey();
			RegisterDataObject(daoKey);
			BeginTransaction("updateBOKey");
			try
			{
				daoKey.Key = _key;
				daoKey.Type = _type;
				daoKey.RootId = _rootId;
				daoKey.ObjectId = _objectId;
				daoKey.Id = _id;
				daoKey.KeyName = _keyName;
				daoKey.Code = _code;
				daoKey.Update();
				CommitTransaction();
				
				_key = daoKey.Key;
				_type = daoKey.Type;
				_rootId = daoKey.RootId;
				_objectId = daoKey.ObjectId;
				_id = daoKey.Id;
				_keyName = daoKey.KeyName;
				_code = daoKey.Code;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOKey");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Key record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOKey daoKey = new DAOKey();
			RegisterDataObject(daoKey);
			BeginTransaction("deleteBOKey");
			try
			{
				daoKey.Key = _key;
				daoKey.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOKey");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///KeyCollection
		///This method returns the collection of BOKey objects
		///</Summary>
		///<returns>
		///List[BOKey]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOKey> KeyCollection()
		{
			try
			{
				IList<BOKey> boKeyCollection = new List<BOKey>();
				IList<DAOKey> daoKeyCollection = DAOKey.SelectAll();
			
				foreach(DAOKey daoKey in daoKeyCollection)
					boKeyCollection.Add(new BOKey(daoKey));
			
				return boKeyCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///KeyCollectionCount
		///This method returns the collection count of BOKey objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 KeyCollectionCount()
		{
			try
			{
				Int32 objCount = DAOKey.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		///<Summary>
		///EnglishCollection
		///This method returns its collection of BOEnglish objects
		///</Summary>
		///<returns>
		///IList[BOEnglish]
		///</returns>
		///<parameters>
		///BOKey
		///</parameters>
		public virtual IList<BOEnglish> EnglishCollection()
		{
			try
			{
				if(_boEnglishCollection == null)
					LoadEnglishCollection();
				
				return _boEnglishCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///FrenchCollection
		///This method returns its collection of BOFrench objects
		///</Summary>
		///<returns>
		///IList[BOFrench]
		///</returns>
		///<parameters>
		///BOKey
		///</parameters>
		public virtual IList<BOFrench> FrenchCollection()
		{
			try
			{
				if(_boFrenchCollection == null)
					LoadFrenchCollection();
				
				return _boFrenchCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///VietnameseCollection
		///This method returns its collection of BOVietnamese objects
		///</Summary>
		///<returns>
		///IList[BOVietnamese]
		///</returns>
		///<parameters>
		///BOKey
		///</parameters>
		public virtual IList<BOVietnamese> VietnameseCollection()
		{
			try
			{
				if(_boVietnameseCollection == null)
					LoadVietnameseCollection();
				
				return _boVietnameseCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOKey>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOKey.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///KeyCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOKey objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boKeyCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOKey> daoKeyCollection = DAOKey.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOKey resdaoKey in daoKeyCollection)
					boKeyCollection.Add((T)(object)new BOKey(resdaoKey));
			
				return boKeyCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///KeyCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOKey objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOKey.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///LoadEnglishCollection
		///This method loads the internal collection of BOEnglish objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadEnglishCollection()
		{
			try
			{
				_boEnglishCollection = new List<BOEnglish>();
				IList<DAOEnglish> daoEnglishCollection = DAOEnglish.SelectAllByKey(_key.Value);
				
				foreach(DAOEnglish daoEnglish in daoEnglishCollection)
					_boEnglishCollection.Add(new BOEnglish(daoEnglish));
			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddEnglish
		///This method persists a BOEnglish object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEnglish
		///</parameters>
		public virtual void AddEnglish(BOEnglish boEnglish)
		{
			DAOEnglish daoEnglish = new DAOEnglish();
			RegisterDataObject(daoEnglish);
			BeginTransaction("addEnglish");
			try
			{
				daoEnglish.Val = boEnglish.Val;
				daoEnglish.Key = _key.Value;
				daoEnglish.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boEnglish = new BOEnglish(daoEnglish);
				if(_boEnglishCollection != null)
					_boEnglishCollection.Add(boEnglish);
			}
			catch(Exception ex)
			{
				RollbackTransaction("addEnglish");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllEnglish
		///This method deletes all BOEnglish objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllEnglish()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllEnglish");
			try
			{
				DAOEnglish.DeleteAllByKey(ConnectionProvider, _key.Value);
				CommitTransaction();
				if(_boEnglishCollection != null)
				{
					_boEnglishCollection.Clear();
					_boEnglishCollection = null;
				}
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteAllEnglish");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadFrenchCollection
		///This method loads the internal collection of BOFrench objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadFrenchCollection()
		{
			try
			{
				_boFrenchCollection = new List<BOFrench>();
				IList<DAOFrench> daoFrenchCollection = DAOFrench.SelectAllByKey(_key.Value);
				
				foreach(DAOFrench daoFrench in daoFrenchCollection)
					_boFrenchCollection.Add(new BOFrench(daoFrench));
			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddFrench
		///This method persists a BOFrench object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOFrench
		///</parameters>
		public virtual void AddFrench(BOFrench boFrench)
		{
			DAOFrench daoFrench = new DAOFrench();
			RegisterDataObject(daoFrench);
			BeginTransaction("addFrench");
			try
			{
				daoFrench.Val = boFrench.Val;
				daoFrench.Key = _key.Value;
				daoFrench.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boFrench = new BOFrench(daoFrench);
				if(_boFrenchCollection != null)
					_boFrenchCollection.Add(boFrench);
			}
			catch(Exception ex)
			{
				RollbackTransaction("addFrench");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllFrench
		///This method deletes all BOFrench objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllFrench()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllFrench");
			try
			{
				DAOFrench.DeleteAllByKey(ConnectionProvider, _key.Value);
				CommitTransaction();
				if(_boFrenchCollection != null)
				{
					_boFrenchCollection.Clear();
					_boFrenchCollection = null;
				}
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteAllFrench");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadVietnameseCollection
		///This method loads the internal collection of BOVietnamese objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadVietnameseCollection()
		{
			try
			{
				_boVietnameseCollection = new List<BOVietnamese>();
				IList<DAOVietnamese> daoVietnameseCollection = DAOVietnamese.SelectAllByKey(_key.Value);
				
				foreach(DAOVietnamese daoVietnamese in daoVietnameseCollection)
					_boVietnameseCollection.Add(new BOVietnamese(daoVietnamese));
			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddVietnamese
		///This method persists a BOVietnamese object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOVietnamese
		///</parameters>
		public virtual void AddVietnamese(BOVietnamese boVietnamese)
		{
			DAOVietnamese daoVietnamese = new DAOVietnamese();
			RegisterDataObject(daoVietnamese);
			BeginTransaction("addVietnamese");
			try
			{
				daoVietnamese.Val = boVietnamese.Val;
				daoVietnamese.Key = _key.Value;
				daoVietnamese.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boVietnamese = new BOVietnamese(daoVietnamese);
				if(_boVietnameseCollection != null)
					_boVietnameseCollection.Add(boVietnamese);
			}
			catch(Exception ex)
			{
				RollbackTransaction("addVietnamese");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllVietnamese
		///This method deletes all BOVietnamese objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllVietnamese()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllVietnamese");
			try
			{
				DAOVietnamese.DeleteAllByKey(ConnectionProvider, _key.Value);
				CommitTransaction();
				if(_boVietnameseCollection != null)
				{
					_boVietnameseCollection.Clear();
					_boVietnameseCollection = null;
				}
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteAllVietnamese");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Key
		{
			get
			{
				 return _key;
			}
			set
			{
				_key = value;
				_isDirty = true;
			}
		}
		
		public virtual byte? Type
		{
			get
			{
				 return _type;
			}
			set
			{
				_type = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RootId
		{
			get
			{
				 return _rootId;
			}
			set
			{
				_rootId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ObjectId
		{
			get
			{
				 return _objectId;
			}
			set
			{
				_objectId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string KeyName
		{
			get
			{
				 return _keyName;
			}
			set
			{
				_keyName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Code
		{
			get
			{
				 return _code;
			}
			set
			{
				_code = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
