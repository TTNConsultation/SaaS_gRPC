/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOLanguage.
	///It maintains a collection of BORestaurantLanguage objects.
	///</Summary>
	public partial class BOLanguage : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int16? _id;
		protected string _code;
		protected string _value;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BORestaurantLanguage> _boRestaurantLanguageCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOLanguage()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int16 id
		///</parameters>
		public BOLanguage(Int16 id)
		{
			try
			{
				DAOLanguage daoLanguage = DAOLanguage.SelectOne(id);
				_id = daoLanguage.Id;
				_code = daoLanguage.Code;
				_value = daoLanguage.Value;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOLanguage
		///</parameters>
		protected internal BOLanguage(DAOLanguage daoLanguage)
		{
			try
			{
				_id = daoLanguage.Id;
				_code = daoLanguage.Code;
				_value = daoLanguage.Value;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Language record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOLanguage daoLanguage = new DAOLanguage();
			RegisterDataObject(daoLanguage);
			BeginTransaction("savenewBOLanguage");
			try
			{
				daoLanguage.Code = _code;
				daoLanguage.Value = _value;
				daoLanguage.Insert();
				CommitTransaction();
				
				_id = daoLanguage.Id;
				_code = daoLanguage.Code;
				_value = daoLanguage.Value;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOLanguage");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Language record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOLanguage
		///</parameters>
		public virtual void Update()
		{
			DAOLanguage daoLanguage = new DAOLanguage();
			RegisterDataObject(daoLanguage);
			BeginTransaction("updateBOLanguage");
			try
			{
				daoLanguage.Id = _id;
				daoLanguage.Code = _code;
				daoLanguage.Value = _value;
				daoLanguage.Update();
				CommitTransaction();
				
				_id = daoLanguage.Id;
				_code = daoLanguage.Code;
				_value = daoLanguage.Value;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOLanguage");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Language record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOLanguage daoLanguage = new DAOLanguage();
			RegisterDataObject(daoLanguage);
			BeginTransaction("deleteBOLanguage");
			try
			{
				daoLanguage.Id = _id;
				daoLanguage.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOLanguage");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LanguageCollection
		///This method returns the collection of BOLanguage objects
		///</Summary>
		///<returns>
		///List[BOLanguage]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOLanguage> LanguageCollection()
		{
			try
			{
				IList<BOLanguage> boLanguageCollection = new List<BOLanguage>();
				IList<DAOLanguage> daoLanguageCollection = DAOLanguage.SelectAll();
			
				foreach(DAOLanguage daoLanguage in daoLanguageCollection)
					boLanguageCollection.Add(new BOLanguage(daoLanguage));
			
				return boLanguageCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///LanguageCollectionCount
		///This method returns the collection count of BOLanguage objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 LanguageCollectionCount()
		{
			try
			{
				Int32 objCount = DAOLanguage.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		///<Summary>
		///RestaurantLanguageCollection
		///This method returns its collection of BORestaurantLanguage objects
		///</Summary>
		///<returns>
		///IList[BORestaurantLanguage]
		///</returns>
		///<parameters>
		///BOLanguage
		///</parameters>
		public virtual IList<BORestaurantLanguage> RestaurantLanguageCollection()
		{
			try
			{
				if(_boRestaurantLanguageCollection == null)
					LoadRestaurantLanguageCollection();
				
				return _boRestaurantLanguageCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOLanguage>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOLanguage.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///LanguageCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOLanguage objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boLanguageCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOLanguage> daoLanguageCollection = DAOLanguage.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOLanguage resdaoLanguage in daoLanguageCollection)
					boLanguageCollection.Add((T)(object)new BOLanguage(resdaoLanguage));
			
				return boLanguageCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///LanguageCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOLanguage objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOLanguage.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///LoadRestaurantLanguageCollection
		///This method loads the internal collection of BORestaurantLanguage objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadRestaurantLanguageCollection()
		{
			try
			{
				_boRestaurantLanguageCollection = new List<BORestaurantLanguage>();
				IList<DAORestaurantLanguage> daoRestaurantLanguageCollection = DAORestaurantLanguage.SelectAllByLanguageId(_id.Value);
				
				foreach(DAORestaurantLanguage daoRestaurantLanguage in daoRestaurantLanguageCollection)
					_boRestaurantLanguageCollection.Add(new BORestaurantLanguage(daoRestaurantLanguage));
			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddRestaurantLanguage
		///This method persists a BORestaurantLanguage object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORestaurantLanguage
		///</parameters>
		public virtual void AddRestaurantLanguage(BORestaurantLanguage boRestaurantLanguage)
		{
			DAORestaurantLanguage daoRestaurantLanguage = new DAORestaurantLanguage();
			RegisterDataObject(daoRestaurantLanguage);
			BeginTransaction("addRestaurantLanguage");
			try
			{
				daoRestaurantLanguage.Id = boRestaurantLanguage.Id;
				daoRestaurantLanguage.RestaurantId = boRestaurantLanguage.RestaurantId;
				daoRestaurantLanguage.State = boRestaurantLanguage.State;
				daoRestaurantLanguage.LanguageId = _id.Value;
				daoRestaurantLanguage.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boRestaurantLanguage = new BORestaurantLanguage(daoRestaurantLanguage);
				if(_boRestaurantLanguageCollection != null)
					_boRestaurantLanguageCollection.Add(boRestaurantLanguage);
			}
			catch(Exception ex)
			{
				RollbackTransaction("addRestaurantLanguage");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllRestaurantLanguage
		///This method deletes all BORestaurantLanguage objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllRestaurantLanguage()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllRestaurantLanguage");
			try
			{
				DAORestaurantLanguage.DeleteAllByLanguageId(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boRestaurantLanguageCollection != null)
				{
					_boRestaurantLanguageCollection.Clear();
					_boRestaurantLanguageCollection = null;
				}
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteAllRestaurantLanguage");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int16? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Code
		{
			get
			{
				 return _code;
			}
			set
			{
				_code = value;
				_isDirty = true;
			}
		}
		
		public virtual string Value
		{
			get
			{
				 return _value;
			}
			set
			{
				_value = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
