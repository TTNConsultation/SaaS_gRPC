/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORestaurantMenu.
	///It maintains a collection of BOMenu objects.
	///</Summary>
	public partial class BORestaurantMenu : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _restaurantId;
		protected byte? _stateId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOMenu> _boMenuCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORestaurantMenu()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BORestaurantMenu(Int32 id)
		{
			try
			{
				DAORestaurantMenu daoRestaurantMenu = DAORestaurantMenu.SelectOne(id);
				_id = daoRestaurantMenu.Id;
				_restaurantId = daoRestaurantMenu.RestaurantId;
				_stateId = daoRestaurantMenu.StateId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORestaurantMenu
		///</parameters>
		protected internal BORestaurantMenu(DAORestaurantMenu daoRestaurantMenu)
		{
			try
			{
				_id = daoRestaurantMenu.Id;
				_restaurantId = daoRestaurantMenu.RestaurantId;
				_stateId = daoRestaurantMenu.StateId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new RestaurantMenu record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORestaurantMenu daoRestaurantMenu = new DAORestaurantMenu();
			RegisterDataObject(daoRestaurantMenu);
			BeginTransaction("savenewBORestaurantMenu");
			try
			{
				daoRestaurantMenu.RestaurantId = _restaurantId;
				daoRestaurantMenu.StateId = _stateId;
				daoRestaurantMenu.Insert();
				CommitTransaction();
				
				_id = daoRestaurantMenu.Id;
				_restaurantId = daoRestaurantMenu.RestaurantId;
				_stateId = daoRestaurantMenu.StateId;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBORestaurantMenu");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one RestaurantMenu record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORestaurantMenu
		///</parameters>
		public virtual void Update()
		{
			DAORestaurantMenu daoRestaurantMenu = new DAORestaurantMenu();
			RegisterDataObject(daoRestaurantMenu);
			BeginTransaction("updateBORestaurantMenu");
			try
			{
				daoRestaurantMenu.Id = _id;
				daoRestaurantMenu.RestaurantId = _restaurantId;
				daoRestaurantMenu.StateId = _stateId;
				daoRestaurantMenu.Update();
				CommitTransaction();
				
				_id = daoRestaurantMenu.Id;
				_restaurantId = daoRestaurantMenu.RestaurantId;
				_stateId = daoRestaurantMenu.StateId;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBORestaurantMenu");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one RestaurantMenu record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORestaurantMenu daoRestaurantMenu = new DAORestaurantMenu();
			RegisterDataObject(daoRestaurantMenu);
			BeginTransaction("deleteBORestaurantMenu");
			try
			{
				daoRestaurantMenu.Id = _id;
				daoRestaurantMenu.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBORestaurantMenu");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///RestaurantMenuCollection
		///This method returns the collection of BORestaurantMenu objects
		///</Summary>
		///<returns>
		///List[BORestaurantMenu]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORestaurantMenu> RestaurantMenuCollection()
		{
			try
			{
				IList<BORestaurantMenu> boRestaurantMenuCollection = new List<BORestaurantMenu>();
				IList<DAORestaurantMenu> daoRestaurantMenuCollection = DAORestaurantMenu.SelectAll();
			
				foreach(DAORestaurantMenu daoRestaurantMenu in daoRestaurantMenuCollection)
					boRestaurantMenuCollection.Add(new BORestaurantMenu(daoRestaurantMenu));
			
				return boRestaurantMenuCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///RestaurantMenuCollectionCount
		///This method returns the collection count of BORestaurantMenu objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RestaurantMenuCollectionCount()
		{
			try
			{
				Int32 objCount = DAORestaurantMenu.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		///<Summary>
		///MenuCollection
		///This method returns its collection of BOMenu objects
		///</Summary>
		///<returns>
		///IList[BOMenu]
		///</returns>
		///<parameters>
		///BORestaurantMenu
		///</parameters>
		public virtual IList<BOMenu> MenuCollection()
		{
			try
			{
				if(_boMenuCollection == null)
					LoadMenuCollection();
				
				return _boMenuCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORestaurantMenu>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORestaurantMenu.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///RestaurantMenuCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORestaurantMenu objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRestaurantMenuCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORestaurantMenu> daoRestaurantMenuCollection = DAORestaurantMenu.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORestaurantMenu resdaoRestaurantMenu in daoRestaurantMenuCollection)
					boRestaurantMenuCollection.Add((T)(object)new BORestaurantMenu(resdaoRestaurantMenu));
			
				return boRestaurantMenuCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///RestaurantMenuCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORestaurantMenu objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORestaurantMenu.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///LoadMenuCollection
		///This method loads the internal collection of BOMenu objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadMenuCollection()
		{
			try
			{
				_boMenuCollection = new List<BOMenu>();
				IList<DAOMenu> daoMenuCollection = DAOMenu.SelectAllByRestaurantMenuId(_id.Value);
				
				foreach(DAOMenu daoMenu in daoMenuCollection)
					_boMenuCollection.Add(new BOMenu(daoMenu));
			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddMenu
		///This method persists a BOMenu object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOMenu
		///</parameters>
		public virtual void AddMenu(BOMenu boMenu)
		{
			DAOMenu daoMenu = new DAOMenu();
			RegisterDataObject(daoMenu);
			BeginTransaction("addMenu");
			try
			{
				daoMenu.Id = boMenu.Id;
				daoMenu.Price = boMenu.Price;
				daoMenu.UseItemDescription = boMenu.UseItemDescription;
				daoMenu.StateId = boMenu.StateId;
				daoMenu.NameKey = boMenu.NameKey;
				daoMenu.DescriptionKey = boMenu.DescriptionKey;
				daoMenu.RestaurantMenuId = _id.Value;
				daoMenu.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boMenu = new BOMenu(daoMenu);
				if(_boMenuCollection != null)
					_boMenuCollection.Add(boMenu);
			}
			catch(Exception ex)
			{
				RollbackTransaction("addMenu");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllMenu
		///This method deletes all BOMenu objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllMenu()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllMenu");
			try
			{
				DAOMenu.DeleteAllByRestaurantMenuId(ConnectionProvider, _id.Value);
				CommitTransaction();
				if(_boMenuCollection != null)
				{
					_boMenuCollection.Clear();
					_boMenuCollection = null;
				}
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteAllMenu");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RestaurantId
		{
			get
			{
				 return _restaurantId;
			}
			set
			{
				_restaurantId = value;
				_isDirty = true;
			}
		}
		
		public virtual byte? StateId
		{
			get
			{
				 return _stateId;
			}
			set
			{
				_stateId = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
