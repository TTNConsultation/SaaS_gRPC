/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSpParameter.
	///</Summary>
	public partial class BOSpParameter : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected string _spName;
		protected Int32? _spId;
		protected string _name;
		protected string _type;
		protected Int16? _maxLength;
		protected Int32? _precision;
		protected Int32? _scale;
		protected Int32? _order;
		protected bool? _isOutput;
		protected string _collation;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSpParameter()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSpParameter
		///</parameters>
		protected internal BOSpParameter(DAOSpParameter daoSpParameter)
		{
			try
			{
				_spName = daoSpParameter.SpName;
				_spId = daoSpParameter.SpId;
				_name = daoSpParameter.Name;
				_type = daoSpParameter.Type;
				_maxLength = daoSpParameter.MaxLength;
				_precision = daoSpParameter.Precision;
				_scale = daoSpParameter.Scale;
				_order = daoSpParameter.Order;
				_isOutput = daoSpParameter.IsOutput;
				_collation = daoSpParameter.Collation;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///SpParameterCollection
		///This method returns the collection of BOSpParameter objects
		///</Summary>
		///<returns>
		///List[BOSpParameter]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSpParameter> SpParameterCollection()
		{
			try
			{
				IList<BOSpParameter> boSpParameterCollection = new List<BOSpParameter>();
				IList<DAOSpParameter> daoSpParameterCollection = DAOSpParameter.SelectAll();
			
				foreach(DAOSpParameter daoSpParameter in daoSpParameterCollection)
					boSpParameterCollection.Add(new BOSpParameter(daoSpParameter));
			
				return boSpParameterCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SpParameterCollectionCount
		///This method returns the collection count of BOSpParameter objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SpParameterCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSpParameter.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSpParameter>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSpParameter.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SpParameterCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSpParameter objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSpParameterCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSpParameter> daoSpParameterCollection = DAOSpParameter.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSpParameter resdaoSpParameter in daoSpParameterCollection)
					boSpParameterCollection.Add((T)(object)new BOSpParameter(resdaoSpParameter));
			
				return boSpParameterCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SpParameterCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSpParameter objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSpParameter.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string SpName
		{
			get
			{
				 return _spName;
			}
			set
			{
				_spName = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SpId
		{
			get
			{
				 return _spId;
			}
			set
			{
				_spId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		public virtual string Type
		{
			get
			{
				 return _type;
			}
			set
			{
				_type = value;
				_isDirty = true;
			}
		}
		
		public virtual Int16? MaxLength
		{
			get
			{
				 return _maxLength;
			}
			set
			{
				_maxLength = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Precision
		{
			get
			{
				 return _precision;
			}
			set
			{
				_precision = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Scale
		{
			get
			{
				 return _scale;
			}
			set
			{
				_scale = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Order
		{
			get
			{
				 return _order;
			}
			set
			{
				_order = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? IsOutput
		{
			get
			{
				 return _isOutput;
			}
			set
			{
				_isOutput = value;
				_isDirty = true;
			}
		}
		
		public virtual string Collation
		{
			get
			{
				 return _collation;
			}
			set
			{
				_collation = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
