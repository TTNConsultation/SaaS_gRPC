/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOMenu.
	///</Summary>
	public partial class BOMenu : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _restaurantMenuId;
		protected decimal? _price;
		protected bool? _useItemDescription;
		protected byte? _stateId;
		protected Int32? _nameKey;
		protected Int32? _descriptionKey;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOMenu()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOMenu(Int32 id)
		{
			try
			{
				DAOMenu daoMenu = DAOMenu.SelectOne(id);
				_id = daoMenu.Id;
				_restaurantMenuId = daoMenu.RestaurantMenuId;
				_price = daoMenu.Price;
				_useItemDescription = daoMenu.UseItemDescription;
				_stateId = daoMenu.StateId;
				_nameKey = daoMenu.NameKey;
				_descriptionKey = daoMenu.DescriptionKey;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOMenu
		///</parameters>
		protected internal BOMenu(DAOMenu daoMenu)
		{
			try
			{
				_id = daoMenu.Id;
				_restaurantMenuId = daoMenu.RestaurantMenuId;
				_price = daoMenu.Price;
				_useItemDescription = daoMenu.UseItemDescription;
				_stateId = daoMenu.StateId;
				_nameKey = daoMenu.NameKey;
				_descriptionKey = daoMenu.DescriptionKey;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Menu record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOMenu daoMenu = new DAOMenu();
			RegisterDataObject(daoMenu);
			BeginTransaction("savenewBOMenu");
			try
			{
				daoMenu.RestaurantMenuId = _restaurantMenuId;
				daoMenu.Price = _price;
				daoMenu.UseItemDescription = _useItemDescription;
				daoMenu.StateId = _stateId;
				daoMenu.NameKey = _nameKey;
				daoMenu.DescriptionKey = _descriptionKey;
				daoMenu.Insert();
				CommitTransaction();
				
				_id = daoMenu.Id;
				_restaurantMenuId = daoMenu.RestaurantMenuId;
				_price = daoMenu.Price;
				_useItemDescription = daoMenu.UseItemDescription;
				_stateId = daoMenu.StateId;
				_nameKey = daoMenu.NameKey;
				_descriptionKey = daoMenu.DescriptionKey;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOMenu");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Menu record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOMenu
		///</parameters>
		public virtual void Update()
		{
			DAOMenu daoMenu = new DAOMenu();
			RegisterDataObject(daoMenu);
			BeginTransaction("updateBOMenu");
			try
			{
				daoMenu.Id = _id;
				daoMenu.RestaurantMenuId = _restaurantMenuId;
				daoMenu.Price = _price;
				daoMenu.UseItemDescription = _useItemDescription;
				daoMenu.StateId = _stateId;
				daoMenu.NameKey = _nameKey;
				daoMenu.DescriptionKey = _descriptionKey;
				daoMenu.Update();
				CommitTransaction();
				
				_id = daoMenu.Id;
				_restaurantMenuId = daoMenu.RestaurantMenuId;
				_price = daoMenu.Price;
				_useItemDescription = daoMenu.UseItemDescription;
				_stateId = daoMenu.StateId;
				_nameKey = daoMenu.NameKey;
				_descriptionKey = daoMenu.DescriptionKey;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOMenu");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Menu record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOMenu daoMenu = new DAOMenu();
			RegisterDataObject(daoMenu);
			BeginTransaction("deleteBOMenu");
			try
			{
				daoMenu.Id = _id;
				daoMenu.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOMenu");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///MenuCollection
		///This method returns the collection of BOMenu objects
		///</Summary>
		///<returns>
		///List[BOMenu]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOMenu> MenuCollection()
		{
			try
			{
				IList<BOMenu> boMenuCollection = new List<BOMenu>();
				IList<DAOMenu> daoMenuCollection = DAOMenu.SelectAll();
			
				foreach(DAOMenu daoMenu in daoMenuCollection)
					boMenuCollection.Add(new BOMenu(daoMenu));
			
				return boMenuCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///MenuCollectionCount
		///This method returns the collection count of BOMenu objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 MenuCollectionCount()
		{
			try
			{
				Int32 objCount = DAOMenu.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOMenu>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOMenu.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///MenuCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOMenu objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boMenuCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOMenu> daoMenuCollection = DAOMenu.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOMenu resdaoMenu in daoMenuCollection)
					boMenuCollection.Add((T)(object)new BOMenu(resdaoMenu));
			
				return boMenuCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///MenuCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOMenu objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOMenu.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RestaurantMenuId
		{
			get
			{
				 return _restaurantMenuId;
			}
			set
			{
				_restaurantMenuId = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Price
		{
			get
			{
				 return _price;
			}
			set
			{
				_price = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? UseItemDescription
		{
			get
			{
				 return _useItemDescription;
			}
			set
			{
				_useItemDescription = value;
				_isDirty = true;
			}
		}
		
		public virtual byte? StateId
		{
			get
			{
				 return _stateId;
			}
			set
			{
				_stateId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? NameKey
		{
			get
			{
				 return _nameKey;
			}
			set
			{
				_nameKey = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? DescriptionKey
		{
			get
			{
				 return _descriptionKey;
			}
			set
			{
				_descriptionKey = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
