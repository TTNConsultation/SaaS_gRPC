/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOKeyType.
	///</Summary>
	public partial class BOKeyType : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected byte? _id;
		protected string _name;
		protected Int16? _maxLen;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOKeyType()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///byte id
		///</parameters>
		public BOKeyType(byte id)
		{
			try
			{
				DAOKeyType daoKeyType = DAOKeyType.SelectOne(id);
				_id = daoKeyType.Id;
				_name = daoKeyType.Name;
				_maxLen = daoKeyType.MaxLen;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOKeyType
		///</parameters>
		protected internal BOKeyType(DAOKeyType daoKeyType)
		{
			try
			{
				_id = daoKeyType.Id;
				_name = daoKeyType.Name;
				_maxLen = daoKeyType.MaxLen;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new KeyType record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOKeyType daoKeyType = new DAOKeyType();
			RegisterDataObject(daoKeyType);
			BeginTransaction("savenewBOKeyType");
			try
			{
				daoKeyType.Name = _name;
				daoKeyType.MaxLen = _maxLen;
				daoKeyType.Insert();
				CommitTransaction();
				
				_id = daoKeyType.Id;
				_name = daoKeyType.Name;
				_maxLen = daoKeyType.MaxLen;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOKeyType");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one KeyType record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOKeyType
		///</parameters>
		public virtual void Update()
		{
			DAOKeyType daoKeyType = new DAOKeyType();
			RegisterDataObject(daoKeyType);
			BeginTransaction("updateBOKeyType");
			try
			{
				daoKeyType.Id = _id;
				daoKeyType.Name = _name;
				daoKeyType.MaxLen = _maxLen;
				daoKeyType.Update();
				CommitTransaction();
				
				_id = daoKeyType.Id;
				_name = daoKeyType.Name;
				_maxLen = daoKeyType.MaxLen;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOKeyType");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one KeyType record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOKeyType daoKeyType = new DAOKeyType();
			RegisterDataObject(daoKeyType);
			BeginTransaction("deleteBOKeyType");
			try
			{
				daoKeyType.Id = _id;
				daoKeyType.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOKeyType");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///KeyTypeCollection
		///This method returns the collection of BOKeyType objects
		///</Summary>
		///<returns>
		///List[BOKeyType]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOKeyType> KeyTypeCollection()
		{
			try
			{
				IList<BOKeyType> boKeyTypeCollection = new List<BOKeyType>();
				IList<DAOKeyType> daoKeyTypeCollection = DAOKeyType.SelectAll();
			
				foreach(DAOKeyType daoKeyType in daoKeyTypeCollection)
					boKeyTypeCollection.Add(new BOKeyType(daoKeyType));
			
				return boKeyTypeCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///KeyTypeCollectionCount
		///This method returns the collection count of BOKeyType objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 KeyTypeCollectionCount()
		{
			try
			{
				Int32 objCount = DAOKeyType.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOKeyType>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOKeyType.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///KeyTypeCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOKeyType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boKeyTypeCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOKeyType> daoKeyTypeCollection = DAOKeyType.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOKeyType resdaoKeyType in daoKeyTypeCollection)
					boKeyTypeCollection.Add((T)(object)new BOKeyType(resdaoKeyType));
			
				return boKeyTypeCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///KeyTypeCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOKeyType objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOKeyType.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual byte? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		public virtual Int16? MaxLen
		{
			get
			{
				 return _maxLen;
			}
			set
			{
				_maxLen = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
