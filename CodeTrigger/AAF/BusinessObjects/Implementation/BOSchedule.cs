/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSchedule.
	///</Summary>
	public partial class BOSchedule : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _restaurantId;
		protected Int32? _mondayStart;
		protected Int32? _mondayEnd;
		protected Int32? _tuesdayStart;
		protected Int32? _tuesdayEnd;
		protected Int32? _wednesdayStart;
		protected Int32? _wednesdayEnd;
		protected Int32? _thursdayStart;
		protected Int32? _thursdayEnd;
		protected Int32? _fridayStart;
		protected Int32? _fridayEnd;
		protected Int32? _saturdayStart;
		protected Int32? _saturdayEnd;
		protected Int32? _sundayStart;
		protected Int32? _sundayEnd;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSchedule()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 restaurantId
		///</parameters>
		public BOSchedule(Int32 restaurantId)
		{
			try
			{
				DAOSchedule daoSchedule = DAOSchedule.SelectOne(restaurantId);
				_restaurantId = daoSchedule.RestaurantId;
				_mondayStart = daoSchedule.MondayStart;
				_mondayEnd = daoSchedule.MondayEnd;
				_tuesdayStart = daoSchedule.TuesdayStart;
				_tuesdayEnd = daoSchedule.TuesdayEnd;
				_wednesdayStart = daoSchedule.WednesdayStart;
				_wednesdayEnd = daoSchedule.WednesdayEnd;
				_thursdayStart = daoSchedule.ThursdayStart;
				_thursdayEnd = daoSchedule.ThursdayEnd;
				_fridayStart = daoSchedule.FridayStart;
				_fridayEnd = daoSchedule.FridayEnd;
				_saturdayStart = daoSchedule.SaturdayStart;
				_saturdayEnd = daoSchedule.SaturdayEnd;
				_sundayStart = daoSchedule.SundayStart;
				_sundayEnd = daoSchedule.SundayEnd;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSchedule
		///</parameters>
		protected internal BOSchedule(DAOSchedule daoSchedule)
		{
			try
			{
				_restaurantId = daoSchedule.RestaurantId;
				_mondayStart = daoSchedule.MondayStart;
				_mondayEnd = daoSchedule.MondayEnd;
				_tuesdayStart = daoSchedule.TuesdayStart;
				_tuesdayEnd = daoSchedule.TuesdayEnd;
				_wednesdayStart = daoSchedule.WednesdayStart;
				_wednesdayEnd = daoSchedule.WednesdayEnd;
				_thursdayStart = daoSchedule.ThursdayStart;
				_thursdayEnd = daoSchedule.ThursdayEnd;
				_fridayStart = daoSchedule.FridayStart;
				_fridayEnd = daoSchedule.FridayEnd;
				_saturdayStart = daoSchedule.SaturdayStart;
				_saturdayEnd = daoSchedule.SaturdayEnd;
				_sundayStart = daoSchedule.SundayStart;
				_sundayEnd = daoSchedule.SundayEnd;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Schedule record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSchedule daoSchedule = new DAOSchedule();
			RegisterDataObject(daoSchedule);
			BeginTransaction("savenewBOSchedule");
			try
			{
				daoSchedule.RestaurantId = _restaurantId;
				daoSchedule.MondayStart = _mondayStart;
				daoSchedule.MondayEnd = _mondayEnd;
				daoSchedule.TuesdayStart = _tuesdayStart;
				daoSchedule.TuesdayEnd = _tuesdayEnd;
				daoSchedule.WednesdayStart = _wednesdayStart;
				daoSchedule.WednesdayEnd = _wednesdayEnd;
				daoSchedule.ThursdayStart = _thursdayStart;
				daoSchedule.ThursdayEnd = _thursdayEnd;
				daoSchedule.FridayStart = _fridayStart;
				daoSchedule.FridayEnd = _fridayEnd;
				daoSchedule.SaturdayStart = _saturdayStart;
				daoSchedule.SaturdayEnd = _saturdayEnd;
				daoSchedule.SundayStart = _sundayStart;
				daoSchedule.SundayEnd = _sundayEnd;
				daoSchedule.Insert();
				CommitTransaction();
				
				_restaurantId = daoSchedule.RestaurantId;
				_mondayStart = daoSchedule.MondayStart;
				_mondayEnd = daoSchedule.MondayEnd;
				_tuesdayStart = daoSchedule.TuesdayStart;
				_tuesdayEnd = daoSchedule.TuesdayEnd;
				_wednesdayStart = daoSchedule.WednesdayStart;
				_wednesdayEnd = daoSchedule.WednesdayEnd;
				_thursdayStart = daoSchedule.ThursdayStart;
				_thursdayEnd = daoSchedule.ThursdayEnd;
				_fridayStart = daoSchedule.FridayStart;
				_fridayEnd = daoSchedule.FridayEnd;
				_saturdayStart = daoSchedule.SaturdayStart;
				_saturdayEnd = daoSchedule.SaturdayEnd;
				_sundayStart = daoSchedule.SundayStart;
				_sundayEnd = daoSchedule.SundayEnd;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOSchedule");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Schedule record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSchedule
		///</parameters>
		public virtual void Update()
		{
			DAOSchedule daoSchedule = new DAOSchedule();
			RegisterDataObject(daoSchedule);
			BeginTransaction("updateBOSchedule");
			try
			{
				daoSchedule.RestaurantId = _restaurantId;
				daoSchedule.MondayStart = _mondayStart;
				daoSchedule.MondayEnd = _mondayEnd;
				daoSchedule.TuesdayStart = _tuesdayStart;
				daoSchedule.TuesdayEnd = _tuesdayEnd;
				daoSchedule.WednesdayStart = _wednesdayStart;
				daoSchedule.WednesdayEnd = _wednesdayEnd;
				daoSchedule.ThursdayStart = _thursdayStart;
				daoSchedule.ThursdayEnd = _thursdayEnd;
				daoSchedule.FridayStart = _fridayStart;
				daoSchedule.FridayEnd = _fridayEnd;
				daoSchedule.SaturdayStart = _saturdayStart;
				daoSchedule.SaturdayEnd = _saturdayEnd;
				daoSchedule.SundayStart = _sundayStart;
				daoSchedule.SundayEnd = _sundayEnd;
				daoSchedule.Update();
				CommitTransaction();
				
				_restaurantId = daoSchedule.RestaurantId;
				_mondayStart = daoSchedule.MondayStart;
				_mondayEnd = daoSchedule.MondayEnd;
				_tuesdayStart = daoSchedule.TuesdayStart;
				_tuesdayEnd = daoSchedule.TuesdayEnd;
				_wednesdayStart = daoSchedule.WednesdayStart;
				_wednesdayEnd = daoSchedule.WednesdayEnd;
				_thursdayStart = daoSchedule.ThursdayStart;
				_thursdayEnd = daoSchedule.ThursdayEnd;
				_fridayStart = daoSchedule.FridayStart;
				_fridayEnd = daoSchedule.FridayEnd;
				_saturdayStart = daoSchedule.SaturdayStart;
				_saturdayEnd = daoSchedule.SaturdayEnd;
				_sundayStart = daoSchedule.SundayStart;
				_sundayEnd = daoSchedule.SundayEnd;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOSchedule");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Schedule record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSchedule daoSchedule = new DAOSchedule();
			RegisterDataObject(daoSchedule);
			BeginTransaction("deleteBOSchedule");
			try
			{
				daoSchedule.RestaurantId = _restaurantId;
				daoSchedule.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOSchedule");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///ScheduleCollection
		///This method returns the collection of BOSchedule objects
		///</Summary>
		///<returns>
		///List[BOSchedule]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSchedule> ScheduleCollection()
		{
			try
			{
				IList<BOSchedule> boScheduleCollection = new List<BOSchedule>();
				IList<DAOSchedule> daoScheduleCollection = DAOSchedule.SelectAll();
			
				foreach(DAOSchedule daoSchedule in daoScheduleCollection)
					boScheduleCollection.Add(new BOSchedule(daoSchedule));
			
				return boScheduleCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///ScheduleCollectionCount
		///This method returns the collection count of BOSchedule objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ScheduleCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSchedule.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSchedule>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSchedule.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///ScheduleCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSchedule objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boScheduleCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSchedule> daoScheduleCollection = DAOSchedule.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSchedule resdaoSchedule in daoScheduleCollection)
					boScheduleCollection.Add((T)(object)new BOSchedule(resdaoSchedule));
			
				return boScheduleCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///ScheduleCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSchedule objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSchedule.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RestaurantId
		{
			get
			{
				 return _restaurantId;
			}
			set
			{
				_restaurantId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? MondayStart
		{
			get
			{
				 return _mondayStart;
			}
			set
			{
				_mondayStart = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? MondayEnd
		{
			get
			{
				 return _mondayEnd;
			}
			set
			{
				_mondayEnd = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TuesdayStart
		{
			get
			{
				 return _tuesdayStart;
			}
			set
			{
				_tuesdayStart = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? TuesdayEnd
		{
			get
			{
				 return _tuesdayEnd;
			}
			set
			{
				_tuesdayEnd = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? WednesdayStart
		{
			get
			{
				 return _wednesdayStart;
			}
			set
			{
				_wednesdayStart = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? WednesdayEnd
		{
			get
			{
				 return _wednesdayEnd;
			}
			set
			{
				_wednesdayEnd = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ThursdayStart
		{
			get
			{
				 return _thursdayStart;
			}
			set
			{
				_thursdayStart = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ThursdayEnd
		{
			get
			{
				 return _thursdayEnd;
			}
			set
			{
				_thursdayEnd = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FridayStart
		{
			get
			{
				 return _fridayStart;
			}
			set
			{
				_fridayStart = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? FridayEnd
		{
			get
			{
				 return _fridayEnd;
			}
			set
			{
				_fridayEnd = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SaturdayStart
		{
			get
			{
				 return _saturdayStart;
			}
			set
			{
				_saturdayStart = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SaturdayEnd
		{
			get
			{
				 return _saturdayEnd;
			}
			set
			{
				_saturdayEnd = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SundayStart
		{
			get
			{
				 return _sundayStart;
			}
			set
			{
				_sundayStart = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SundayEnd
		{
			get
			{
				 return _sundayEnd;
			}
			set
			{
				_sundayEnd = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
