/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOMenuItem.
	///</Summary>
	public partial class BOMenuItem : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _menuId;
		protected Int32? _itemId;
		protected byte? _quantity;
		protected byte? _stateId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOMenuItem()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOMenuItem(Int32 id)
		{
			try
			{
				DAOMenuItem daoMenuItem = DAOMenuItem.SelectOne(id);
				_id = daoMenuItem.Id;
				_menuId = daoMenuItem.MenuId;
				_itemId = daoMenuItem.ItemId;
				_quantity = daoMenuItem.Quantity;
				_stateId = daoMenuItem.StateId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///Constructor using unique field(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///ItemId
		///</parameters>
		public BOMenuItem(Int32 menuId, Int32 itemId)
		{
			try
			{
				DAOMenuItem daoMenuItem = DAOMenuItem.SelectOneByUniqueFields(menuId, itemId);
				_id = daoMenuItem.Id;
				_menuId = daoMenuItem.MenuId;
				_itemId = daoMenuItem.ItemId;
				_quantity = daoMenuItem.Quantity;
				_stateId = daoMenuItem.StateId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOMenuItem
		///</parameters>
		protected internal BOMenuItem(DAOMenuItem daoMenuItem)
		{
			try
			{
				_id = daoMenuItem.Id;
				_menuId = daoMenuItem.MenuId;
				_itemId = daoMenuItem.ItemId;
				_quantity = daoMenuItem.Quantity;
				_stateId = daoMenuItem.StateId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new MenuItem record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOMenuItem daoMenuItem = new DAOMenuItem();
			RegisterDataObject(daoMenuItem);
			BeginTransaction("savenewBOMenuItem");
			try
			{
				daoMenuItem.MenuId = _menuId;
				daoMenuItem.ItemId = _itemId;
				daoMenuItem.Quantity = _quantity;
				daoMenuItem.StateId = _stateId;
				daoMenuItem.Insert();
				CommitTransaction();
				
				_id = daoMenuItem.Id;
				_menuId = daoMenuItem.MenuId;
				_itemId = daoMenuItem.ItemId;
				_quantity = daoMenuItem.Quantity;
				_stateId = daoMenuItem.StateId;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOMenuItem");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one MenuItem record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOMenuItem
		///</parameters>
		public virtual void Update()
		{
			DAOMenuItem daoMenuItem = new DAOMenuItem();
			RegisterDataObject(daoMenuItem);
			BeginTransaction("updateBOMenuItem");
			try
			{
				daoMenuItem.Id = _id;
				daoMenuItem.MenuId = _menuId;
				daoMenuItem.ItemId = _itemId;
				daoMenuItem.Quantity = _quantity;
				daoMenuItem.StateId = _stateId;
				daoMenuItem.Update();
				CommitTransaction();
				
				_id = daoMenuItem.Id;
				_menuId = daoMenuItem.MenuId;
				_itemId = daoMenuItem.ItemId;
				_quantity = daoMenuItem.Quantity;
				_stateId = daoMenuItem.StateId;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOMenuItem");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one MenuItem record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOMenuItem daoMenuItem = new DAOMenuItem();
			RegisterDataObject(daoMenuItem);
			BeginTransaction("deleteBOMenuItem");
			try
			{
				daoMenuItem.Id = _id;
				daoMenuItem.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOMenuItem");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///MenuItemCollection
		///This method returns the collection of BOMenuItem objects
		///</Summary>
		///<returns>
		///List[BOMenuItem]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOMenuItem> MenuItemCollection()
		{
			try
			{
				IList<BOMenuItem> boMenuItemCollection = new List<BOMenuItem>();
				IList<DAOMenuItem> daoMenuItemCollection = DAOMenuItem.SelectAll();
			
				foreach(DAOMenuItem daoMenuItem in daoMenuItemCollection)
					boMenuItemCollection.Add(new BOMenuItem(daoMenuItem));
			
				return boMenuItemCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///MenuItemCollectionCount
		///This method returns the collection count of BOMenuItem objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 MenuItemCollectionCount()
		{
			try
			{
				Int32 objCount = DAOMenuItem.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOMenuItem>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOMenuItem.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///MenuItemCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOMenuItem objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boMenuItemCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOMenuItem> daoMenuItemCollection = DAOMenuItem.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOMenuItem resdaoMenuItem in daoMenuItemCollection)
					boMenuItemCollection.Add((T)(object)new BOMenuItem(resdaoMenuItem));
			
				return boMenuItemCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///MenuItemCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOMenuItem objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOMenuItem.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? MenuId
		{
			get
			{
				 return _menuId;
			}
			set
			{
				_menuId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ItemId
		{
			get
			{
				 return _itemId;
			}
			set
			{
				_itemId = value;
				_isDirty = true;
			}
		}
		
		public virtual byte? Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual byte? StateId
		{
			get
			{
				 return _stateId;
			}
			set
			{
				_stateId = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
