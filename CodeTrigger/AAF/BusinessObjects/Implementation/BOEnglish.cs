/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOEnglish.
	///</Summary>
	public partial class BOEnglish : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _key;
		protected string _val;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOEnglish()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 key
		///</parameters>
		public BOEnglish(Int32 key)
		{
			try
			{
				DAOEnglish daoEnglish = DAOEnglish.SelectOne(key);
				_key = daoEnglish.Key;
				_val = daoEnglish.Val;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOEnglish
		///</parameters>
		protected internal BOEnglish(DAOEnglish daoEnglish)
		{
			try
			{
				_key = daoEnglish.Key;
				_val = daoEnglish.Val;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new English record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOEnglish daoEnglish = new DAOEnglish();
			RegisterDataObject(daoEnglish);
			BeginTransaction("savenewBOEnglish");
			try
			{
				daoEnglish.Key = _key;
				daoEnglish.Val = _val;
				daoEnglish.Insert();
				CommitTransaction();
				
				_key = daoEnglish.Key;
				_val = daoEnglish.Val;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOEnglish");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one English record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEnglish
		///</parameters>
		public virtual void Update()
		{
			DAOEnglish daoEnglish = new DAOEnglish();
			RegisterDataObject(daoEnglish);
			BeginTransaction("updateBOEnglish");
			try
			{
				daoEnglish.Key = _key;
				daoEnglish.Val = _val;
				daoEnglish.Update();
				CommitTransaction();
				
				_key = daoEnglish.Key;
				_val = daoEnglish.Val;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOEnglish");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one English record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOEnglish daoEnglish = new DAOEnglish();
			RegisterDataObject(daoEnglish);
			BeginTransaction("deleteBOEnglish");
			try
			{
				daoEnglish.Key = _key;
				daoEnglish.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOEnglish");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///EnglishCollection
		///This method returns the collection of BOEnglish objects
		///</Summary>
		///<returns>
		///List[BOEnglish]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOEnglish> EnglishCollection()
		{
			try
			{
				IList<BOEnglish> boEnglishCollection = new List<BOEnglish>();
				IList<DAOEnglish> daoEnglishCollection = DAOEnglish.SelectAll();
			
				foreach(DAOEnglish daoEnglish in daoEnglishCollection)
					boEnglishCollection.Add(new BOEnglish(daoEnglish));
			
				return boEnglishCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///EnglishCollectionCount
		///This method returns the collection count of BOEnglish objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 EnglishCollectionCount()
		{
			try
			{
				Int32 objCount = DAOEnglish.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOEnglish>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOEnglish.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///EnglishCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOEnglish objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boEnglishCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOEnglish> daoEnglishCollection = DAOEnglish.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOEnglish resdaoEnglish in daoEnglishCollection)
					boEnglishCollection.Add((T)(object)new BOEnglish(resdaoEnglish));
			
				return boEnglishCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///EnglishCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOEnglish objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOEnglish.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Key
		{
			get
			{
				 return _key;
			}
			set
			{
				_key = value;
				_isDirty = true;
			}
		}
		
		public virtual string Val
		{
			get
			{
				 return _val;
			}
			set
			{
				_val = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
