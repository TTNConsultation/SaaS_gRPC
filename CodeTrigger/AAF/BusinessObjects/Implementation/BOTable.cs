/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using AAF.DataObjects;
using AAF.DataObjects.Interfaces;
using AAF.BusinessObjects.Interfaces;

namespace AAF.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTable.
	///</Summary>
	public partial class BOTable : zAAFConn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _restaurantId;
		protected byte? _numberOfSeat;
		protected byte? _stateId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOTable()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 id
		///</parameters>
		public BOTable(Int32 id)
		{
			try
			{
				DAOTable daoTable = DAOTable.SelectOne(id);
				_id = daoTable.Id;
				_restaurantId = daoTable.RestaurantId;
				_numberOfSeat = daoTable.NumberOfSeat;
				_stateId = daoTable.StateId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTable
		///</parameters>
		protected internal BOTable(DAOTable daoTable)
		{
			try
			{
				_id = daoTable.Id;
				_restaurantId = daoTable.RestaurantId;
				_numberOfSeat = daoTable.NumberOfSeat;
				_stateId = daoTable.StateId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Table record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOTable daoTable = new DAOTable();
			RegisterDataObject(daoTable);
			BeginTransaction("savenewBOTable");
			try
			{
				daoTable.RestaurantId = _restaurantId;
				daoTable.NumberOfSeat = _numberOfSeat;
				daoTable.StateId = _stateId;
				daoTable.Insert();
				CommitTransaction();
				
				_id = daoTable.Id;
				_restaurantId = daoTable.RestaurantId;
				_numberOfSeat = daoTable.NumberOfSeat;
				_stateId = daoTable.StateId;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("savenewBOTable");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Table record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTable
		///</parameters>
		public virtual void Update()
		{
			DAOTable daoTable = new DAOTable();
			RegisterDataObject(daoTable);
			BeginTransaction("updateBOTable");
			try
			{
				daoTable.Id = _id;
				daoTable.RestaurantId = _restaurantId;
				daoTable.NumberOfSeat = _numberOfSeat;
				daoTable.StateId = _stateId;
				daoTable.Update();
				CommitTransaction();
				
				_id = daoTable.Id;
				_restaurantId = daoTable.RestaurantId;
				_numberOfSeat = daoTable.NumberOfSeat;
				_stateId = daoTable.StateId;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				RollbackTransaction("updateBOTable");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Table record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOTable daoTable = new DAOTable();
			RegisterDataObject(daoTable);
			BeginTransaction("deleteBOTable");
			try
			{
				daoTable.Id = _id;
				daoTable.Delete();
				CommitTransaction();
			}
			catch(Exception ex)
			{
				RollbackTransaction("deleteBOTable");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///TableCollection
		///This method returns the collection of BOTable objects
		///</Summary>
		///<returns>
		///List[BOTable]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTable> TableCollection()
		{
			try
			{
				IList<BOTable> boTableCollection = new List<BOTable>();
				IList<DAOTable> daoTableCollection = DAOTable.SelectAll();
			
				foreach(DAOTable daoTable in daoTableCollection)
					boTableCollection.Add(new BOTable(daoTable));
			
				return boTableCollection;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///TableCollectionCount
		///This method returns the collection count of BOTable objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TableCollectionCount()
		{
			try
			{
				Int32 objCount = DAOTable.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOTable>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOTable.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///TableCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOTable objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boTableCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOTable> daoTableCollection = DAOTable.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOTable resdaoTable in daoTableCollection)
					boTableCollection.Add((T)(object)new BOTable(resdaoTable));
			
				return boTableCollection;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///TableCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOTable objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOTable.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch(Exception ex)
			{
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RestaurantId
		{
			get
			{
				 return _restaurantId;
			}
			set
			{
				_restaurantId = value;
				_isDirty = true;
			}
		}
		
		public virtual byte? NumberOfSeat
		{
			get
			{
				 return _numberOfSeat;
			}
			set
			{
				_numberOfSeat = value;
				_isDirty = true;
			}
		}
		
		public virtual byte? StateId
		{
			get
			{
				 return _stateId;
			}
			set
			{
				_stateId = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
