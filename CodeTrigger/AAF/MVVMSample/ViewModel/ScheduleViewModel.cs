/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using AAF.BusinessObjects;
using Expr = AAF.BusinessObjects;

namespace AAF.MVVMSample.ViewModel
{
	public partial class ScheduleViewModel : IViewModelBase
	{
		/*WARNING - This class was generated by CodeTrigger. Changes to this file may cause incorrect behaviour and will be lost when the code is regenerated*/
		#region members
		private string _displayName = "Schedule";
		private readonly BOSchedule _searchBO = new BOSchedule();
		private readonly ObservableCollection<BOSchedule> _boSchedules = new ObservableCollection<BOSchedule>();
		private IList<BOSchedule> _boSchedulesCached = new List<BOSchedule>();
		private IList<BOSchedule> _boSchedulesCachedDelete = new List<BOSchedule>();
		private RelayCommand _deleteRowCommand;
		#endregion
		
		#region constructor
		public ScheduleViewModel()
		{		}
		#endregion
		
		#region methods
		public static IList<BOSchedule> GetScheduleList()
		{
			try
			{
				IList<BOSchedule> listSchedule = BOSchedule.ScheduleCollection();
				return listSchedule;
			}
			catch(Exception)
			{	/*rethrow or handle gracefully*/return null;	}
			finally	{	}
		}
		
		private void AddExpr(ref Criteria<BOSchedule> crit, string propertyName, object propertyValue, string propertyValueText, Func<object, string> formatter = null)
		{
			bool wildcard = propertyValueText.Contains("%");
			crit.Add(wildcard
				? Expression.Like(propertyName, propertyValue, formatter)
				: Expression.Eq(propertyName, propertyValue, formatter));
		}

		public int GetLoadCount()
		{
			var crit = new Criteria<BOSchedule>();
			try
			{
				if(_searchBO.RestaurantId.HasValue) AddExpr(ref crit, "RestaurantId", _searchBO.RestaurantId, "" );
				if(_searchBO.MondayStart.HasValue) AddExpr(ref crit, "MondayStart", _searchBO.MondayStart, "" );
				if(_searchBO.MondayEnd.HasValue) AddExpr(ref crit, "MondayEnd", _searchBO.MondayEnd, "" );
				if(_searchBO.TuesdayStart.HasValue) AddExpr(ref crit, "TuesdayStart", _searchBO.TuesdayStart, "" );
				if(_searchBO.TuesdayEnd.HasValue) AddExpr(ref crit, "TuesdayEnd", _searchBO.TuesdayEnd, "" );
				if(_searchBO.WednesdayStart.HasValue) AddExpr(ref crit, "WednesdayStart", _searchBO.WednesdayStart, "" );
				if(_searchBO.WednesdayEnd.HasValue) AddExpr(ref crit, "WednesdayEnd", _searchBO.WednesdayEnd, "" );
				if(_searchBO.ThursdayStart.HasValue) AddExpr(ref crit, "ThursdayStart", _searchBO.ThursdayStart, "" );
				if(_searchBO.ThursdayEnd.HasValue) AddExpr(ref crit, "ThursdayEnd", _searchBO.ThursdayEnd, "" );
				if(_searchBO.FridayStart.HasValue) AddExpr(ref crit, "FridayStart", _searchBO.FridayStart, "" );
				if(_searchBO.FridayEnd.HasValue) AddExpr(ref crit, "FridayEnd", _searchBO.FridayEnd, "" );
				if(_searchBO.SaturdayStart.HasValue) AddExpr(ref crit, "SaturdayStart", _searchBO.SaturdayStart, "" );
				if(_searchBO.SaturdayEnd.HasValue) AddExpr(ref crit, "SaturdayEnd", _searchBO.SaturdayEnd, "" );
				if(_searchBO.SundayStart.HasValue) AddExpr(ref crit, "SundayStart", _searchBO.SundayStart, "" );
				if(_searchBO.SundayEnd.HasValue) AddExpr(ref crit, "SundayEnd", _searchBO.SundayEnd, "" );
				int resultCount = crit.Count();
				return resultCount;
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void LoadRecords()
		{
			var crit = new Criteria<BOSchedule>();
			try
			{
				if(_searchBO.RestaurantId.HasValue) AddExpr(ref crit, "RestaurantId", _searchBO.RestaurantId, "" );
				if(_searchBO.MondayStart.HasValue) AddExpr(ref crit, "MondayStart", _searchBO.MondayStart, "" );
				if(_searchBO.MondayEnd.HasValue) AddExpr(ref crit, "MondayEnd", _searchBO.MondayEnd, "" );
				if(_searchBO.TuesdayStart.HasValue) AddExpr(ref crit, "TuesdayStart", _searchBO.TuesdayStart, "" );
				if(_searchBO.TuesdayEnd.HasValue) AddExpr(ref crit, "TuesdayEnd", _searchBO.TuesdayEnd, "" );
				if(_searchBO.WednesdayStart.HasValue) AddExpr(ref crit, "WednesdayStart", _searchBO.WednesdayStart, "" );
				if(_searchBO.WednesdayEnd.HasValue) AddExpr(ref crit, "WednesdayEnd", _searchBO.WednesdayEnd, "" );
				if(_searchBO.ThursdayStart.HasValue) AddExpr(ref crit, "ThursdayStart", _searchBO.ThursdayStart, "" );
				if(_searchBO.ThursdayEnd.HasValue) AddExpr(ref crit, "ThursdayEnd", _searchBO.ThursdayEnd, "" );
				if(_searchBO.FridayStart.HasValue) AddExpr(ref crit, "FridayStart", _searchBO.FridayStart, "" );
				if(_searchBO.FridayEnd.HasValue) AddExpr(ref crit, "FridayEnd", _searchBO.FridayEnd, "" );
				if(_searchBO.SaturdayStart.HasValue) AddExpr(ref crit, "SaturdayStart", _searchBO.SaturdayStart, "" );
				if(_searchBO.SaturdayEnd.HasValue) AddExpr(ref crit, "SaturdayEnd", _searchBO.SaturdayEnd, "" );
				if(_searchBO.SundayStart.HasValue) AddExpr(ref crit, "SundayStart", _searchBO.SundayStart, "" );
				if(_searchBO.SundayEnd.HasValue) AddExpr(ref crit, "SundayEnd", _searchBO.SundayEnd, "" );
				
				_boSchedules.Clear();
				_boSchedulesCachedDelete.Clear();
				_boSchedulesCached = crit.List<BOSchedule>();
				foreach(BOSchedule boSchedule in _boSchedulesCached)
					_boSchedules.Add(boSchedule);
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void SaveCurrentView()
		{
			try
			{
				foreach(BOSchedule boSchedule in _boSchedules)
				{
					if(_boSchedulesCached.Contains(boSchedule))
					{
						if(!boSchedule.IsDirty) continue;
						try{ boSchedule.Update(); }
						catch(Exception ex)
						{ throw new Exception("Error updating record: CodeTrigger has detected a data exception. Possible invalid foreign key reference, missing fields or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
					}
					else
					{
						try{ boSchedule.SaveNew(); }
						catch(Exception ex)
						{ throw new Exception("Error saving new record: CodeTrigger has detected a data exception. Possible duplicate primary key, invalid foreign key reference, or missing fields. Exception details follow below.\r\n\r\n" + ex.Message); }
					}
				}
				foreach(BOSchedule boSchedule in _boSchedulesCachedDelete)
				{
					if((boSchedule == null)  || (!boSchedule.RestaurantId.HasValue))
					continue;
				
					try{ boSchedule.Delete(); }
					catch(Exception ex)
					{ throw new Exception("Error deleting record: CodeTrigger has detected a data exception. Possible existing foreign key reference or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
				}
				_boSchedulesCachedDelete.Clear();
				
				LoadRecords();
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void DeleteRow(object state)
		{
			if(state is BOSchedule)
			{
				_boSchedules.Remove((BOSchedule)state);
				_boSchedulesCachedDelete.Add((BOSchedule)state);
			}
		}
		#endregion
		
		#region properties
		public BOSchedule Filter
		{
			get {	return _searchBO;	}
		}
		public ObservableCollection<BOSchedule> Results
		{
			get {	return _boSchedules;	}
		}
		
		public string DisplayName
		{
			get {	return _displayName;	}
			set {	_displayName = value;	}
		}
		
		public RelayCommand DeleteRowCommand
		{
			get
			{
				if(_deleteRowCommand == null)
					_deleteRowCommand = new RelayCommand(DeleteRow);
				return _deleteRowCommand;
			}
		}
		#endregion
	}
}

