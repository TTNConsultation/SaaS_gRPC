/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Text;
using System.Windows;
using System.Windows.Input;
namespace AAF.MVVMSample.ViewModel
{
	public partial class MainFrameViewModel : IViewModelBase, INotifyPropertyChanged
	{
		
		#region members
		private string _displayName = "Main Frame";
		private const int _maxResultsCheck = 3750;
		private IViewModelBase _selectedModel = null;
		private readonly ObservableCollection<IViewModelBase> _viewModels = new ObservableCollection<IViewModelBase>();
		private ReadOnlyCollection<MenuItem> _menuItems;
		private readonly Action<string> _popupMessage;
		private readonly Func<string, string, bool> _confirmMessage;
		#endregion
		
		#region constructors
		public MainFrameViewModel(Action<string> popupMessage, Func<string, string, bool> confirmMessage) 
		{
			_popupMessage = popupMessage;
			_confirmMessage = confirmMessage;
			_viewModels.Add(new EnglishViewModel());
			_viewModels.Add(new FrenchViewModel());
			_viewModels.Add(new ItemViewModel());
			_viewModels.Add(new KeyViewModel());
			_viewModels.Add(new KeyTypeViewModel());
			_viewModels.Add(new LanguageViewModel());
			_viewModels.Add(new LocationViewModel());
			_viewModels.Add(new MenuViewModel());
			_viewModels.Add(new MenuItemViewModel());
			_viewModels.Add(new RestaurantViewModel());
			_viewModels.Add(new RestaurantLanguageViewModel());
			_viewModels.Add(new RestaurantLocationViewModel());
			_viewModels.Add(new RestaurantMenuViewModel());
			_viewModels.Add(new ScheduleViewModel());
			_viewModels.Add(new StateViewModel());
			_viewModels.Add(new TableViewModel());
			_viewModels.Add(new VietnameseViewModel());
			_viewModels.Add(new AppSettingViewModel());
			_viewModels.Add(new SpParameterViewModel());
			_viewModels.Add(new SpPropertyViewModel());
			
		}
		#endregion
		
		#region methods
		private void LoadEnglishViewModel()
		{
			IViewModelBase boEnglishViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is EnglishViewModel)
					boEnglishViewModel = vm;
			}
			if(boEnglishViewModel == null)
			{
				boEnglishViewModel = new EnglishViewModel() { DisplayName = "English"};
				_viewModels.Add(boEnglishViewModel);
			}
			try
			{
				int resultsCount = boEnglishViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boEnglishViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boEnglishViewModel;
		}
		private void LoadFrenchViewModel()
		{
			IViewModelBase boFrenchViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is FrenchViewModel)
					boFrenchViewModel = vm;
			}
			if(boFrenchViewModel == null)
			{
				boFrenchViewModel = new FrenchViewModel() { DisplayName = "French"};
				_viewModels.Add(boFrenchViewModel);
			}
			try
			{
				int resultsCount = boFrenchViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boFrenchViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boFrenchViewModel;
		}
		private void LoadItemViewModel()
		{
			IViewModelBase boItemViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is ItemViewModel)
					boItemViewModel = vm;
			}
			if(boItemViewModel == null)
			{
				boItemViewModel = new ItemViewModel() { DisplayName = "Item"};
				_viewModels.Add(boItemViewModel);
			}
			try
			{
				int resultsCount = boItemViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boItemViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boItemViewModel;
		}
		private void LoadKeyViewModel()
		{
			IViewModelBase boKeyViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is KeyViewModel)
					boKeyViewModel = vm;
			}
			if(boKeyViewModel == null)
			{
				boKeyViewModel = new KeyViewModel() { DisplayName = "Key"};
				_viewModels.Add(boKeyViewModel);
			}
			try
			{
				int resultsCount = boKeyViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boKeyViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boKeyViewModel;
		}
		private void LoadKeyTypeViewModel()
		{
			IViewModelBase boKeyTypeViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is KeyTypeViewModel)
					boKeyTypeViewModel = vm;
			}
			if(boKeyTypeViewModel == null)
			{
				boKeyTypeViewModel = new KeyTypeViewModel() { DisplayName = "KeyType"};
				_viewModels.Add(boKeyTypeViewModel);
			}
			try
			{
				int resultsCount = boKeyTypeViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boKeyTypeViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boKeyTypeViewModel;
		}
		private void LoadLanguageViewModel()
		{
			IViewModelBase boLanguageViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is LanguageViewModel)
					boLanguageViewModel = vm;
			}
			if(boLanguageViewModel == null)
			{
				boLanguageViewModel = new LanguageViewModel() { DisplayName = "Language"};
				_viewModels.Add(boLanguageViewModel);
			}
			try
			{
				int resultsCount = boLanguageViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boLanguageViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boLanguageViewModel;
		}
		private void LoadLocationViewModel()
		{
			IViewModelBase boLocationViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is LocationViewModel)
					boLocationViewModel = vm;
			}
			if(boLocationViewModel == null)
			{
				boLocationViewModel = new LocationViewModel() { DisplayName = "Location"};
				_viewModels.Add(boLocationViewModel);
			}
			try
			{
				int resultsCount = boLocationViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boLocationViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boLocationViewModel;
		}
		private void LoadMenuViewModel()
		{
			IViewModelBase boMenuViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is MenuViewModel)
					boMenuViewModel = vm;
			}
			if(boMenuViewModel == null)
			{
				boMenuViewModel = new MenuViewModel() { DisplayName = "Menu"};
				_viewModels.Add(boMenuViewModel);
			}
			try
			{
				int resultsCount = boMenuViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boMenuViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boMenuViewModel;
		}
		private void LoadMenuItemViewModel()
		{
			IViewModelBase boMenuItemViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is MenuItemViewModel)
					boMenuItemViewModel = vm;
			}
			if(boMenuItemViewModel == null)
			{
				boMenuItemViewModel = new MenuItemViewModel() { DisplayName = "MenuItem"};
				_viewModels.Add(boMenuItemViewModel);
			}
			try
			{
				int resultsCount = boMenuItemViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boMenuItemViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boMenuItemViewModel;
		}
		private void LoadRestaurantViewModel()
		{
			IViewModelBase boRestaurantViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is RestaurantViewModel)
					boRestaurantViewModel = vm;
			}
			if(boRestaurantViewModel == null)
			{
				boRestaurantViewModel = new RestaurantViewModel() { DisplayName = "Restaurant"};
				_viewModels.Add(boRestaurantViewModel);
			}
			try
			{
				int resultsCount = boRestaurantViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boRestaurantViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boRestaurantViewModel;
		}
		private void LoadRestaurantLanguageViewModel()
		{
			IViewModelBase boRestaurantLanguageViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is RestaurantLanguageViewModel)
					boRestaurantLanguageViewModel = vm;
			}
			if(boRestaurantLanguageViewModel == null)
			{
				boRestaurantLanguageViewModel = new RestaurantLanguageViewModel() { DisplayName = "RestaurantLanguage"};
				_viewModels.Add(boRestaurantLanguageViewModel);
			}
			try
			{
				int resultsCount = boRestaurantLanguageViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boRestaurantLanguageViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boRestaurantLanguageViewModel;
		}
		private void LoadRestaurantLocationViewModel()
		{
			IViewModelBase boRestaurantLocationViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is RestaurantLocationViewModel)
					boRestaurantLocationViewModel = vm;
			}
			if(boRestaurantLocationViewModel == null)
			{
				boRestaurantLocationViewModel = new RestaurantLocationViewModel() { DisplayName = "RestaurantLocation"};
				_viewModels.Add(boRestaurantLocationViewModel);
			}
			try
			{
				int resultsCount = boRestaurantLocationViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boRestaurantLocationViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boRestaurantLocationViewModel;
		}
		private void LoadRestaurantMenuViewModel()
		{
			IViewModelBase boRestaurantMenuViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is RestaurantMenuViewModel)
					boRestaurantMenuViewModel = vm;
			}
			if(boRestaurantMenuViewModel == null)
			{
				boRestaurantMenuViewModel = new RestaurantMenuViewModel() { DisplayName = "RestaurantMenu"};
				_viewModels.Add(boRestaurantMenuViewModel);
			}
			try
			{
				int resultsCount = boRestaurantMenuViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boRestaurantMenuViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boRestaurantMenuViewModel;
		}
		private void LoadScheduleViewModel()
		{
			IViewModelBase boScheduleViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is ScheduleViewModel)
					boScheduleViewModel = vm;
			}
			if(boScheduleViewModel == null)
			{
				boScheduleViewModel = new ScheduleViewModel() { DisplayName = "Schedule"};
				_viewModels.Add(boScheduleViewModel);
			}
			try
			{
				int resultsCount = boScheduleViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boScheduleViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boScheduleViewModel;
		}
		private void LoadStateViewModel()
		{
			IViewModelBase boStateViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is StateViewModel)
					boStateViewModel = vm;
			}
			if(boStateViewModel == null)
			{
				boStateViewModel = new StateViewModel() { DisplayName = "State"};
				_viewModels.Add(boStateViewModel);
			}
			try
			{
				int resultsCount = boStateViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boStateViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boStateViewModel;
		}
		private void LoadTableViewModel()
		{
			IViewModelBase boTableViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is TableViewModel)
					boTableViewModel = vm;
			}
			if(boTableViewModel == null)
			{
				boTableViewModel = new TableViewModel() { DisplayName = "Table"};
				_viewModels.Add(boTableViewModel);
			}
			try
			{
				int resultsCount = boTableViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boTableViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boTableViewModel;
		}
		private void LoadVietnameseViewModel()
		{
			IViewModelBase boVietnameseViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is VietnameseViewModel)
					boVietnameseViewModel = vm;
			}
			if(boVietnameseViewModel == null)
			{
				boVietnameseViewModel = new VietnameseViewModel() { DisplayName = "Vietnamese"};
				_viewModels.Add(boVietnameseViewModel);
			}
			try
			{
				int resultsCount = boVietnameseViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boVietnameseViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boVietnameseViewModel;
		}
		private void LoadAppSettingViewModel()
		{
			IViewModelBase boAppSettingViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is AppSettingViewModel)
					boAppSettingViewModel = vm;
			}
			if(boAppSettingViewModel == null)
			{
				boAppSettingViewModel = new AppSettingViewModel() { DisplayName = "AppSetting"};
				_viewModels.Add(boAppSettingViewModel);
			}
			try
			{
				int resultsCount = boAppSettingViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boAppSettingViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boAppSettingViewModel;
		}
		private void LoadSpParameterViewModel()
		{
			IViewModelBase boSpParameterViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is SpParameterViewModel)
					boSpParameterViewModel = vm;
			}
			if(boSpParameterViewModel == null)
			{
				boSpParameterViewModel = new SpParameterViewModel() { DisplayName = "SpParameter"};
				_viewModels.Add(boSpParameterViewModel);
			}
			try
			{
				int resultsCount = boSpParameterViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boSpParameterViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boSpParameterViewModel;
		}
		private void LoadSpPropertyViewModel()
		{
			IViewModelBase boSpPropertyViewModel = null;
			foreach(IViewModelBase vm in _viewModels)
			{
				if(vm is SpPropertyViewModel)
					boSpPropertyViewModel = vm;
			}
			if(boSpPropertyViewModel == null)
			{
				boSpPropertyViewModel = new SpPropertyViewModel() { DisplayName = "SpProperty"};
				_viewModels.Add(boSpPropertyViewModel);
			}
			try
			{
				int resultsCount = boSpPropertyViewModel.GetLoadCount();
				if((resultsCount <= _maxResultsCheck) || 
					(_confirmMessage("Your current filter settings will return " + resultsCount + " records. Continue with the data retrieval?", "CodeTrigger Sample - data load notification")))
					boSpPropertyViewModel.LoadRecords();
				if(resultsCount <= _maxResultsCheck)
					_popupMessage("Your search returned " + resultsCount + " records.");
			}
			catch(Exception ex)
			{	 _popupMessage(ex.Message);	}
			SelectedViewModel = boSpPropertyViewModel;
		}
		
		public void SaveCurrentView()
		{
			if(SelectedViewModel == null)
				return;
			string currentView = SelectedViewModel.DisplayName + " list";
			if(_confirmMessage("Are you sure you want to save all your changes to the " + currentView + "?", "CodeTrigger Sample - Update notification"))
			{
				try
				{
					SelectedViewModel.SaveCurrentView();
					_popupMessage("Your changes have been saved");
				}
				catch(Exception ex)
				{	_popupMessage(ex.Message);	}
			}
		}
		
		public event PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(string propertyName)
		{
			PropertyChangedEventHandler handler = this.PropertyChanged;
			if(handler != null)
			{
				var e = new PropertyChangedEventArgs(propertyName);
				handler(this, e);
			}
		}
		
		public void LoadRecords()
		{
			throw new NotImplementedException();
		}
		
		public int GetLoadCount()
		{
			throw new NotImplementedException();
		}
		#endregion
		
		#region properties
		public ReadOnlyCollection<MenuItem> MenuItems
		{
			get
			{
				if(_menuItems == null)
				{
					List<MenuItem> listMenuItems = new List<MenuItem>();
					MenuItem searchDataMenuItem = new MenuItem("Search Data");
					listMenuItems.Add(searchDataMenuItem);
					/*menu items for English*/
					searchDataMenuItem.Children.Add(new MenuItem("Search English") { Command = new RelayCommand(param=>this.LoadEnglishViewModel())});
					
					/*menu items for French*/
					searchDataMenuItem.Children.Add(new MenuItem("Search French") { Command = new RelayCommand(param=>this.LoadFrenchViewModel())});
					
					/*menu items for Item*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Item") { Command = new RelayCommand(param=>this.LoadItemViewModel())});
					
					/*menu items for Key*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Key") { Command = new RelayCommand(param=>this.LoadKeyViewModel())});
					
					/*menu items for KeyType*/
					searchDataMenuItem.Children.Add(new MenuItem("Search KeyType") { Command = new RelayCommand(param=>this.LoadKeyTypeViewModel())});
					
					/*menu items for Language*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Language") { Command = new RelayCommand(param=>this.LoadLanguageViewModel())});
					
					/*menu items for Location*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Location") { Command = new RelayCommand(param=>this.LoadLocationViewModel())});
					
					/*menu items for Menu*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Menu") { Command = new RelayCommand(param=>this.LoadMenuViewModel())});
					
					/*menu items for MenuItem*/
					searchDataMenuItem.Children.Add(new MenuItem("Search MenuItem") { Command = new RelayCommand(param=>this.LoadMenuItemViewModel())});
					
					/*menu items for Restaurant*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Restaurant") { Command = new RelayCommand(param=>this.LoadRestaurantViewModel())});
					
					/*menu items for RestaurantLanguage*/
					searchDataMenuItem.Children.Add(new MenuItem("Search RestaurantLanguage") { Command = new RelayCommand(param=>this.LoadRestaurantLanguageViewModel())});
					
					/*menu items for RestaurantLocation*/
					searchDataMenuItem.Children.Add(new MenuItem("Search RestaurantLocation") { Command = new RelayCommand(param=>this.LoadRestaurantLocationViewModel())});
					
					/*menu items for RestaurantMenu*/
					searchDataMenuItem.Children.Add(new MenuItem("Search RestaurantMenu") { Command = new RelayCommand(param=>this.LoadRestaurantMenuViewModel())});
					
					/*menu items for Schedule*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Schedule") { Command = new RelayCommand(param=>this.LoadScheduleViewModel())});
					
					/*menu items for State*/
					searchDataMenuItem.Children.Add(new MenuItem("Search State") { Command = new RelayCommand(param=>this.LoadStateViewModel())});
					
					/*menu items for Table*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Table") { Command = new RelayCommand(param=>this.LoadTableViewModel())});
					
					/*menu items for Vietnamese*/
					searchDataMenuItem.Children.Add(new MenuItem("Search Vietnamese") { Command = new RelayCommand(param=>this.LoadVietnameseViewModel())});
					
					/*menu items for AppSetting*/
					searchDataMenuItem.Children.Add(new MenuItem("Search AppSetting") { Command = new RelayCommand(param=>this.LoadAppSettingViewModel())});
					
					/*menu items for SpParameter*/
					searchDataMenuItem.Children.Add(new MenuItem("Search SpParameter") { Command = new RelayCommand(param=>this.LoadSpParameterViewModel())});
					
					/*menu items for SpProperty*/
					searchDataMenuItem.Children.Add(new MenuItem("Search SpProperty") { Command = new RelayCommand(param=>this.LoadSpPropertyViewModel())});
					
					MenuItem saveMenuItem = new MenuItem("Save current view") { Command = new RelayCommand(param=>this.SaveCurrentView())};
					listMenuItems.Add(saveMenuItem);
					_menuItems = new ReadOnlyCollection<MenuItem>(listMenuItems);
				}
				return _menuItems;
			}
		}
		
		public string DisplayName
		{
			get {	return _displayName;	}
			set {	_displayName = value;	}
		}
		
		public ObservableCollection<IViewModelBase> ViewModels
		{
			get {	return _viewModels;	}
		}
		
		public IViewModelBase SelectedViewModel
		{
			get {	return _selectedModel;	}
			set
			{
				if(value != _selectedModel)
				{
					_selectedModel = value;
					OnPropertyChanged("SelectedViewModel");
				}
			}
		}
		#endregion
	}
}
