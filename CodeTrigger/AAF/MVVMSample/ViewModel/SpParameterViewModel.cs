/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using AAF.BusinessObjects;
using Expr = AAF.BusinessObjects;

namespace AAF.MVVMSample.ViewModel
{
	public partial class SpParameterViewModel : IViewModelBase
	{
		/*WARNING - This class was generated by CodeTrigger. Changes to this file may cause incorrect behaviour and will be lost when the code is regenerated*/
		#region members
		private string _displayName = "SpParameter";
		private readonly BOSpParameter _searchBO = new BOSpParameter();
		private readonly ObservableCollection<BOSpParameter> _boSpParameters = new ObservableCollection<BOSpParameter>();
		private IList<BOSpParameter> _boSpParametersCached = new List<BOSpParameter>();
		private IList<BOSpParameter> _boSpParametersCachedDelete = new List<BOSpParameter>();
		private RelayCommand _deleteRowCommand;
		#endregion
		
		#region constructor
		public SpParameterViewModel()
		{		}
		#endregion
		
		#region methods
		public static IList<BOSpParameter> GetSpParameterList()
		{
			try
			{
				IList<BOSpParameter> listSpParameter = BOSpParameter.SpParameterCollection();
				return listSpParameter;
			}
			catch(Exception)
			{	/*rethrow or handle gracefully*/return null;	}
			finally	{	}
		}
		
		private void AddExpr(ref Criteria<BOSpParameter> crit, string propertyName, object propertyValue, string propertyValueText, Func<object, string> formatter = null)
		{
			bool wildcard = propertyValueText.Contains("%");
			crit.Add(wildcard
				? Expression.Like(propertyName, propertyValue, formatter)
				: Expression.Eq(propertyName, propertyValue, formatter));
		}

		public int GetLoadCount()
		{
			var crit = new Criteria<BOSpParameter>();
			try
			{
				if(!string.IsNullOrEmpty(_searchBO.SpName)) AddExpr(ref crit, "SpName", _searchBO.SpName, _searchBO.SpName);
				if(_searchBO.SpId.HasValue) AddExpr(ref crit, "SpId", _searchBO.SpId, "" );
				if(!string.IsNullOrEmpty(_searchBO.Name)) AddExpr(ref crit, "Name", _searchBO.Name, _searchBO.Name);
				if(!string.IsNullOrEmpty(_searchBO.Type)) AddExpr(ref crit, "Type", _searchBO.Type, _searchBO.Type);
				if(_searchBO.MaxLength.HasValue) AddExpr(ref crit, "MaxLength", _searchBO.MaxLength, "" );
				if(_searchBO.Precision.HasValue) AddExpr(ref crit, "Precision", _searchBO.Precision, "" );
				if(_searchBO.Scale.HasValue) AddExpr(ref crit, "Scale", _searchBO.Scale, "" );
				if(_searchBO.Order.HasValue) AddExpr(ref crit, "Order", _searchBO.Order, "" );
				if(_searchBO.IsOutput.HasValue) AddExpr(ref crit, "IsOutput", _searchBO.IsOutput, "" );
				if(!string.IsNullOrEmpty(_searchBO.Collation)) AddExpr(ref crit, "Collation", _searchBO.Collation, _searchBO.Collation);
				int resultCount = crit.Count();
				return resultCount;
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void LoadRecords()
		{
			var crit = new Criteria<BOSpParameter>();
			try
			{
				if(!string.IsNullOrEmpty(_searchBO.SpName)) AddExpr(ref crit, "SpName", _searchBO.SpName, _searchBO.SpName);
				if(_searchBO.SpId.HasValue) AddExpr(ref crit, "SpId", _searchBO.SpId, "" );
				if(!string.IsNullOrEmpty(_searchBO.Name)) AddExpr(ref crit, "Name", _searchBO.Name, _searchBO.Name);
				if(!string.IsNullOrEmpty(_searchBO.Type)) AddExpr(ref crit, "Type", _searchBO.Type, _searchBO.Type);
				if(_searchBO.MaxLength.HasValue) AddExpr(ref crit, "MaxLength", _searchBO.MaxLength, "" );
				if(_searchBO.Precision.HasValue) AddExpr(ref crit, "Precision", _searchBO.Precision, "" );
				if(_searchBO.Scale.HasValue) AddExpr(ref crit, "Scale", _searchBO.Scale, "" );
				if(_searchBO.Order.HasValue) AddExpr(ref crit, "Order", _searchBO.Order, "" );
				if(_searchBO.IsOutput.HasValue) AddExpr(ref crit, "IsOutput", _searchBO.IsOutput, "" );
				if(!string.IsNullOrEmpty(_searchBO.Collation)) AddExpr(ref crit, "Collation", _searchBO.Collation, _searchBO.Collation);
				
				_boSpParameters.Clear();
				_boSpParametersCachedDelete.Clear();
				_boSpParametersCached = crit.List<BOSpParameter>();
				foreach(BOSpParameter boSpParameter in _boSpParametersCached)
					_boSpParameters.Add(boSpParameter);
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void SaveCurrentView()
		{
			try
			{
				foreach(BOSpParameter boSpParameter in _boSpParameters)
				{
					if(_boSpParametersCached.Contains(boSpParameter))
					{
						if(!boSpParameter.IsDirty) continue;
						/*cannot update as there is no primary key defined or is a view
						try{ boSpParameter.Update(); }
						catch(Exception ex)
						{ throw new Exception("Error updating record: CodeTrigger has detected a data exception. Possible invalid foreign key reference, missing fields or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
						*/
					}
					else
					{
						/*cannot save as there is no primary key defined or is a view
						try{ boSpParameter.SaveNew(); }
						catch(Exception ex)
						{ throw new Exception("Error saving new record: CodeTrigger has detected a data exception. Possible duplicate primary key, invalid foreign key reference, or missing fields. Exception details follow below.\r\n\r\n" + ex.Message); }
						*/
					}
				}
				/*cannot delete as there is no primary key defined
				foreach(BOSpParameter boSpParameter in _boSpParametersCachedDelete)
				{
					if((boSpParameter == null) )
					continue;
				
					try{ boSpParameter.Delete(); }
					catch(Exception ex)
					{ throw new Exception("Error deleting record: CodeTrigger has detected a data exception. Possible existing foreign key reference or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
				}
				_boSpParametersCachedDelete.Clear();
				*/
				
				LoadRecords();
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void DeleteRow(object state)
		{
			if(state is BOSpParameter)
			{
				_boSpParameters.Remove((BOSpParameter)state);
				_boSpParametersCachedDelete.Add((BOSpParameter)state);
			}
		}
		#endregion
		
		#region properties
		public BOSpParameter Filter
		{
			get {	return _searchBO;	}
		}
		public ObservableCollection<BOSpParameter> Results
		{
			get {	return _boSpParameters;	}
		}
		
		public string DisplayName
		{
			get {	return _displayName;	}
			set {	_displayName = value;	}
		}
		
		public RelayCommand DeleteRowCommand
		{
			get
			{
				if(_deleteRowCommand == null)
					_deleteRowCommand = new RelayCommand(DeleteRow);
				return _deleteRowCommand;
			}
		}
		#endregion
	}
}

