/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using AAF.BusinessObjects;
using Expr = AAF.BusinessObjects;

namespace AAF.MVVMSample.ViewModel
{
	public partial class RestaurantViewModel : IViewModelBase
	{
		/*WARNING - This class was generated by CodeTrigger. Changes to this file may cause incorrect behaviour and will be lost when the code is regenerated*/
		#region members
		private string _displayName = "Restaurant";
		private readonly BORestaurant _searchBO = new BORestaurant();
		private readonly ObservableCollection<BORestaurant> _boRestaurants = new ObservableCollection<BORestaurant>();
		private IList<BORestaurant> _boRestaurantsCached = new List<BORestaurant>();
		private IList<BORestaurant> _boRestaurantsCachedDelete = new List<BORestaurant>();
		private RelayCommand _deleteRowCommand;
		#endregion
		
		#region constructor
		public RestaurantViewModel()
		{		}
		#endregion
		
		#region methods
		public static IList<BORestaurant> GetRestaurantList()
		{
			try
			{
				IList<BORestaurant> listRestaurant = BORestaurant.RestaurantCollection();
				return listRestaurant;
			}
			catch(Exception)
			{	/*rethrow or handle gracefully*/return null;	}
			finally	{	}
		}
		
		private void AddExpr(ref Criteria<BORestaurant> crit, string propertyName, object propertyValue, string propertyValueText, Func<object, string> formatter = null)
		{
			bool wildcard = propertyValueText.Contains("%");
			crit.Add(wildcard
				? Expression.Like(propertyName, propertyValue, formatter)
				: Expression.Eq(propertyName, propertyValue, formatter));
		}

		public int GetLoadCount()
		{
			var crit = new Criteria<BORestaurant>();
			try
			{
				if(_searchBO.Id.HasValue) AddExpr(ref crit, "Id", _searchBO.Id, "" );
				if(!string.IsNullOrEmpty(_searchBO.Name)) AddExpr(ref crit, "Name", _searchBO.Name, _searchBO.Name);
				if(_searchBO.Status.HasValue) AddExpr(ref crit, "Status", _searchBO.Status, "" );
				int resultCount = crit.Count();
				return resultCount;
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void LoadRecords()
		{
			var crit = new Criteria<BORestaurant>();
			try
			{
				if(_searchBO.Id.HasValue) AddExpr(ref crit, "Id", _searchBO.Id, "" );
				if(!string.IsNullOrEmpty(_searchBO.Name)) AddExpr(ref crit, "Name", _searchBO.Name, _searchBO.Name);
				if(_searchBO.Status.HasValue) AddExpr(ref crit, "Status", _searchBO.Status, "" );
				
				_boRestaurants.Clear();
				_boRestaurantsCachedDelete.Clear();
				_boRestaurantsCached = crit.List<BORestaurant>();
				foreach(BORestaurant boRestaurant in _boRestaurantsCached)
					_boRestaurants.Add(boRestaurant);
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void SaveCurrentView()
		{
			try
			{
				foreach(BORestaurant boRestaurant in _boRestaurants)
				{
					if(_boRestaurantsCached.Contains(boRestaurant))
					{
						if(!boRestaurant.IsDirty) continue;
						try{ boRestaurant.Update(); }
						catch(Exception ex)
						{ throw new Exception("Error updating record: CodeTrigger has detected a data exception. Possible invalid foreign key reference, missing fields or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
					}
					else
					{
						try{ boRestaurant.SaveNew(); }
						catch(Exception ex)
						{ throw new Exception("Error saving new record: CodeTrigger has detected a data exception. Possible duplicate primary key, invalid foreign key reference, or missing fields. Exception details follow below.\r\n\r\n" + ex.Message); }
					}
				}
				foreach(BORestaurant boRestaurant in _boRestaurantsCachedDelete)
				{
					if((boRestaurant == null)  || (!boRestaurant.Id.HasValue))
					continue;
				
					try{ boRestaurant.Delete(); }
					catch(Exception ex)
					{ throw new Exception("Error deleting record: CodeTrigger has detected a data exception. Possible existing foreign key reference or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
				}
				_boRestaurantsCachedDelete.Clear();
				
				LoadRecords();
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void DeleteRow(object state)
		{
			if(state is BORestaurant)
			{
				_boRestaurants.Remove((BORestaurant)state);
				_boRestaurantsCachedDelete.Add((BORestaurant)state);
			}
		}
		#endregion
		
		#region properties
		public BORestaurant Filter
		{
			get {	return _searchBO;	}
		}
		public ObservableCollection<BORestaurant> Results
		{
			get {	return _boRestaurants;	}
		}
		
		public string DisplayName
		{
			get {	return _displayName;	}
			set {	_displayName = value;	}
		}
		
		public RelayCommand DeleteRowCommand
		{
			get
			{
				if(_deleteRowCommand == null)
					_deleteRowCommand = new RelayCommand(DeleteRow);
				return _deleteRowCommand;
			}
		}
		#endregion
	}
}

