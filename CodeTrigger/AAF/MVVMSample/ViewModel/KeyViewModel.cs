/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using AAF.BusinessObjects;
using Expr = AAF.BusinessObjects;

namespace AAF.MVVMSample.ViewModel
{
	public partial class KeyViewModel : IViewModelBase
	{
		/*WARNING - This class was generated by CodeTrigger. Changes to this file may cause incorrect behaviour and will be lost when the code is regenerated*/
		#region members
		private string _displayName = "Key";
		private readonly BOKey _searchBO = new BOKey();
		private readonly ObservableCollection<BOKey> _boKeys = new ObservableCollection<BOKey>();
		private IList<BOKey> _boKeysCached = new List<BOKey>();
		private IList<BOKey> _boKeysCachedDelete = new List<BOKey>();
		private RelayCommand _deleteRowCommand;
		#endregion
		
		#region constructor
		public KeyViewModel()
		{		}
		#endregion
		
		#region methods
		public static IList<BOKey> GetKeyList()
		{
			try
			{
				IList<BOKey> listKey = BOKey.KeyCollection();
				return listKey;
			}
			catch(Exception)
			{	/*rethrow or handle gracefully*/return null;	}
			finally	{	}
		}
		
		private void AddExpr(ref Criteria<BOKey> crit, string propertyName, object propertyValue, string propertyValueText, Func<object, string> formatter = null)
		{
			bool wildcard = propertyValueText.Contains("%");
			crit.Add(wildcard
				? Expression.Like(propertyName, propertyValue, formatter)
				: Expression.Eq(propertyName, propertyValue, formatter));
		}

		public int GetLoadCount()
		{
			var crit = new Criteria<BOKey>();
			try
			{
				if(_searchBO.Key.HasValue) AddExpr(ref crit, "Key", _searchBO.Key, "" );
				if(_searchBO.Type.HasValue) AddExpr(ref crit, "Type", _searchBO.Type, "" );
				if(_searchBO.RootId.HasValue) AddExpr(ref crit, "RootId", _searchBO.RootId, "" );
				if(_searchBO.ObjectId.HasValue) AddExpr(ref crit, "Object_id", _searchBO.ObjectId, "" );
				if(_searchBO.Id.HasValue) AddExpr(ref crit, "Id", _searchBO.Id, "" );
				if(!string.IsNullOrEmpty(_searchBO.KeyName)) AddExpr(ref crit, "KeyName", _searchBO.KeyName, _searchBO.KeyName);
				if(!string.IsNullOrEmpty(_searchBO.Code)) AddExpr(ref crit, "Code", _searchBO.Code, _searchBO.Code);
				int resultCount = crit.Count();
				return resultCount;
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void LoadRecords()
		{
			var crit = new Criteria<BOKey>();
			try
			{
				if(_searchBO.Key.HasValue) AddExpr(ref crit, "Key", _searchBO.Key, "" );
				if(_searchBO.Type.HasValue) AddExpr(ref crit, "Type", _searchBO.Type, "" );
				if(_searchBO.RootId.HasValue) AddExpr(ref crit, "RootId", _searchBO.RootId, "" );
				if(_searchBO.ObjectId.HasValue) AddExpr(ref crit, "Object_id", _searchBO.ObjectId, "" );
				if(_searchBO.Id.HasValue) AddExpr(ref crit, "Id", _searchBO.Id, "" );
				if(!string.IsNullOrEmpty(_searchBO.KeyName)) AddExpr(ref crit, "KeyName", _searchBO.KeyName, _searchBO.KeyName);
				if(!string.IsNullOrEmpty(_searchBO.Code)) AddExpr(ref crit, "Code", _searchBO.Code, _searchBO.Code);
				
				_boKeys.Clear();
				_boKeysCachedDelete.Clear();
				_boKeysCached = crit.List<BOKey>();
				foreach(BOKey boKey in _boKeysCached)
					_boKeys.Add(boKey);
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void SaveCurrentView()
		{
			try
			{
				foreach(BOKey boKey in _boKeys)
				{
					if(_boKeysCached.Contains(boKey))
					{
						if(!boKey.IsDirty) continue;
						try{ boKey.Update(); }
						catch(Exception ex)
						{ throw new Exception("Error updating record: CodeTrigger has detected a data exception. Possible invalid foreign key reference, missing fields or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
					}
					else
					{
						try{ boKey.SaveNew(); }
						catch(Exception ex)
						{ throw new Exception("Error saving new record: CodeTrigger has detected a data exception. Possible duplicate primary key, invalid foreign key reference, or missing fields. Exception details follow below.\r\n\r\n" + ex.Message); }
					}
				}
				foreach(BOKey boKey in _boKeysCachedDelete)
				{
					if((boKey == null)  || (!boKey.Key.HasValue))
					continue;
				
					try{ boKey.Delete(); }
					catch(Exception ex)
					{ throw new Exception("Error deleting record: CodeTrigger has detected a data exception. Possible existing foreign key reference or other error. Exception details follow below.\r\n\r\n" + ex.Message); }
				}
				_boKeysCachedDelete.Clear();
				
				LoadRecords();
			}
			catch	{	throw;	}
			finally	{	}
		}
		
		public void DeleteRow(object state)
		{
			if(state is BOKey)
			{
				_boKeys.Remove((BOKey)state);
				_boKeysCachedDelete.Add((BOKey)state);
			}
		}
		#endregion
		
		#region properties
		public BOKey Filter
		{
			get {	return _searchBO;	}
		}
		public ObservableCollection<BOKey> Results
		{
			get {	return _boKeys;	}
		}
		
		public string DisplayName
		{
			get {	return _displayName;	}
			set {	_displayName = value;	}
		}
		
		public RelayCommand DeleteRowCommand
		{
			get
			{
				if(_deleteRowCommand == null)
					_deleteRowCommand = new RelayCommand(DeleteRow);
				return _deleteRowCommand;
			}
		}
		#endregion
	}
}

