/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using AAF.DataObjects.Interfaces;

namespace AAF.DataObjects
{
	public partial class DAOSpParameter : zAAFConn_BaseData
	{
		#region member variables
		protected string _spName;
		protected Int32? _spId;
		protected string _name;
		protected string _type;
		protected Int16? _maxLength;
		protected Int32? _precision;
		protected Int32? _scale;
		protected Int32? _order;
		protected bool? _isOutput;
		protected string _collation;
		protected Int32? _errorCode;
		#endregion

		#region class methods
		public DAOSpParameter()
		{
		}
		///<Summary>
		///Select all rows
		///This method returns all data rows in the table SpParameter
		///</Summary>
		///<returns>
		///IList-DAOSpParameter.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSpParameter> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSpParameter_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SpParameter");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSpParameter_SelectAll returned error code: " + errorCode );

				List<DAOSpParameter> objList = new List<DAOSpParameter>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSpParameter retObj = new DAOSpParameter();
						retObj._spName					 = Convert.IsDBNull(row["SpName"]) ? null : (string)row["SpName"];
						retObj._spId					 = Convert.IsDBNull(row["SpId"]) ? (Int32?)null : (Int32?)row["SpId"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._type					 = Convert.IsDBNull(row["Type"]) ? null : (string)row["Type"];
						retObj._maxLength					 = Convert.IsDBNull(row["MaxLength"]) ? (Int16?)null : (Int16?)row["MaxLength"];
						retObj._precision					 = Convert.IsDBNull(row["Precision"]) ? (Int32?)null : (Int32?)row["Precision"];
						retObj._scale					 = Convert.IsDBNull(row["Scale"]) ? (Int32?)null : (Int32?)row["Scale"];
						retObj._order					 = Convert.IsDBNull(row["Order"]) ? (Int32?)null : (Int32?)row["Order"];
						retObj._isOutput					 = Convert.IsDBNull(row["IsOutput"]) ? (bool?)null : (bool?)row["IsOutput"];
						retObj._collation					 = Convert.IsDBNull(row["Collation"]) ? null : (string)row["Collation"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSpParameter_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSpParameter_SelectAllCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSpParameter
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSpParameter_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SpParameter");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSpParameter_SelectAllByCriteriaProjection returned error code: " + errorCode );

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "SpName", true) == 0) lst.Add(Convert.IsDBNull(row["SpName"]) ? null : (string)row["SpName"]);
						if (string.Compare(projection.Member, "SpId", true) == 0) lst.Add(Convert.IsDBNull(row["SpId"]) ? (Int32?)null : (Int32?)row["SpId"]);
						if (string.Compare(projection.Member, "Name", true) == 0) lst.Add(Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"]);
						if (string.Compare(projection.Member, "Type", true) == 0) lst.Add(Convert.IsDBNull(row["Type"]) ? null : (string)row["Type"]);
						if (string.Compare(projection.Member, "MaxLength", true) == 0) lst.Add(Convert.IsDBNull(row["MaxLength"]) ? (Int16?)null : (Int16?)row["MaxLength"]);
						if (string.Compare(projection.Member, "Precision", true) == 0) lst.Add(Convert.IsDBNull(row["Precision"]) ? (Int32?)null : (Int32?)row["Precision"]);
						if (string.Compare(projection.Member, "Scale", true) == 0) lst.Add(Convert.IsDBNull(row["Scale"]) ? (Int32?)null : (Int32?)row["Scale"]);
						if (string.Compare(projection.Member, "Order", true) == 0) lst.Add(Convert.IsDBNull(row["Order"]) ? (Int32?)null : (Int32?)row["Order"]);
						if (string.Compare(projection.Member, "IsOutput", true) == 0) lst.Add(Convert.IsDBNull(row["IsOutput"]) ? (bool?)null : (bool?)row["IsOutput"]);
						if (string.Compare(projection.Member, "Collation", true) == 0) lst.Add(Convert.IsDBNull(row["Collation"]) ? null : (string)row["Collation"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api SpParameter
		///</Summary>
		///<returns>
		///IList-DAOSpParameter.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSpParameter> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSpParameter_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("SpParameter");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSpParameter_SelectAllByCriteria returned error code: " + errorCode );

				List<DAOSpParameter> objList = new List<DAOSpParameter>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSpParameter retObj = new DAOSpParameter();
						retObj._spName					 = Convert.IsDBNull(row["SpName"]) ? null : (string)row["SpName"];
						retObj._spId					 = Convert.IsDBNull(row["SpId"]) ? (Int32?)null : (Int32?)row["SpId"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._type					 = Convert.IsDBNull(row["Type"]) ? null : (string)row["Type"];
						retObj._maxLength					 = Convert.IsDBNull(row["MaxLength"]) ? (Int16?)null : (Int16?)row["MaxLength"];
						retObj._precision					 = Convert.IsDBNull(row["Precision"]) ? (Int32?)null : (Int32?)row["Precision"];
						retObj._scale					 = Convert.IsDBNull(row["Scale"]) ? (Int32?)null : (Int32?)row["Scale"];
						retObj._order					 = Convert.IsDBNull(row["Order"]) ? (Int32?)null : (Int32?)row["Order"];
						retObj._isOutput					 = Convert.IsDBNull(row["IsOutput"]) ? (bool?)null : (bool?)row["IsOutput"];
						retObj._collation					 = Convert.IsDBNull(row["Collation"]) ? null : (string)row["Collation"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api SpParameter
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSpParameter_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSpParameter_SelectAllByCriteriaCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string SpName
		{
			get
			{
				return _spName;
			}
			set
			{
				_spName = value;
			}
		}

		public Int32? SpId
		{
			get
			{
				return _spId;
			}
			set
			{
				_spId = value;
			}
		}

		public string Name
		{
			get
			{
				return _name;
			}
			set
			{
				_name = value;
			}
		}

		public string Type
		{
			get
			{
				return _type;
			}
			set
			{
				_type = value;
			}
		}

		public Int16? MaxLength
		{
			get
			{
				return _maxLength;
			}
			set
			{
				_maxLength = value;
			}
		}

		public Int32? Precision
		{
			get
			{
				return _precision;
			}
			set
			{
				_precision = value;
			}
		}

		public Int32? Scale
		{
			get
			{
				return _scale;
			}
			set
			{
				_scale = value;
			}
		}

		public Int32? Order
		{
			get
			{
				return _order;
			}
			set
			{
				_order = value;
			}
		}

		public bool? IsOutput
		{
			get
			{
				return _isOutput;
			}
			set
			{
				_isOutput = value;
			}
		}

		public string Collation
		{
			get
			{
				return _collation;
			}
			set
			{
				_collation = value;
			}
		}

		public Int32? ErrorCode
		{
			get
			{
				return _errorCode;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace AAF.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSpParameter_SelectAll = @"
			-- Select All rows
			SET NOCOUNT ON
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[SpName]
			,[SpId]
			,[Name]
			,[Type]
			,[MaxLength]
			,[Precision]
			,[Scale]
			,[Order]
			,[IsOutput]
			,[Collation]
			FROM [app].[SpParameter]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSpParameter_SelectAllCount = @"
			
			SET NOCOUNT ON
			-- selects count of all rows from the table
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [app].[SpParameter]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSpParameter_SelectAllByCriteriaProjection = @"
			
			SET NOCOUNT ON
			-- selects all rows from the table by criteria
			-- returning the error code if any
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [app].[SpParameter]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSpParameter_SelectAllByCriteria = @"
			
			SET NOCOUNT ON
			-- selects all rows from the table by criteria
			-- returning the error code if any
			SELECT 
			[SpName]
			,[SpId]
			,[Name]
			,[Type]
			,[MaxLength]
			,[Precision]
			,[Scale]
			,[Order]
			,[IsOutput]
			,[Collation]
			FROM [app].[SpParameter]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSpParameter_SelectAllByCriteriaCount = @"
			
			SET NOCOUNT ON
			-- selects count of all rows from the table according to criteria
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [app].[SpParameter]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

	}
}
#endregion
