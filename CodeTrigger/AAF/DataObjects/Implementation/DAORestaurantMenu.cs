/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using AAF.DataObjects.Interfaces;

namespace AAF.DataObjects
{
	public partial class DAORestaurantMenu : zAAFConn_BaseData
	{
		#region member variables
		protected Int32? _id;
		protected Int32? _restaurantId;
		protected byte? _stateId;
		protected Int32? _errorCode;
		#endregion

		#region class methods
		public DAORestaurantMenu()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table RestaurantMenu based on the primary key(s)
		///</Summary>
		///<returns>
		///DAORestaurantMenu
		///</returns>
		///<parameters>
		///Int32? id
		///</parameters>
		public static DAORestaurantMenu SelectOne(Int32? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RestaurantMenu");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectOne returned error code: " + errorCode );

				DAORestaurantMenu retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAORestaurantMenu();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Id"];
					retObj._restaurantId					 = Convert.IsDBNull(dt.Rows[0]["RestaurantId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RestaurantId"];
					retObj._stateId					 = Convert.IsDBNull(dt.Rows[0]["StateId"]) ? (byte?)null : (byte?)dt.Rows[0]["StateId"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table RestaurantMenu based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_DeleteOne returned error code: " + _errorCode );

			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table RestaurantMenu based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAORestaurantMenu.
		///</returns>
		///<parameters>
		///Int32? restaurantId
		///</parameters>
		public static IList<DAORestaurantMenu> SelectAllByRestaurantId(Int32? restaurantId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_SelectAllByRestaurantId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RestaurantMenu");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectAllByRestaurantId returned error code: " + errorCode );

				List<DAORestaurantMenu> objList = new List<DAORestaurantMenu>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORestaurantMenu retObj = new DAORestaurantMenu();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._restaurantId					 = Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"];
						retObj._stateId					 = Convert.IsDBNull(row["StateId"]) ? (byte?)null : (byte?)row["StateId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? restaurantId
		///</parameters>
		public static Int32 SelectAllByRestaurantIdCount(Int32? restaurantId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_SelectAllByRestaurantIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectAllByRestaurantIdCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table RestaurantMenu with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zAAFConn_TxConnectionProvider connectionProvider, Int32? restaurantId
		///</parameters>
		public static void DeleteAllByRestaurantId(zAAFConn_TxConnectionProvider connectionProvider, Int32? restaurantId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_DeleteAllByRestaurantId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				command.ExecuteNonQuery();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_DeleteAllByRestaurantId returned error code: " + errorCode );

			}
			catch(Exception ex)
			{
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table RestaurantMenu
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StateId", SqlDbType.TinyInt, 1, ParameterDirection.InputOutput, false, 3, 0, "", DataRowVersion.Proposed, (object)_stateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_InsertOne returned error code: " + _errorCode );

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Id"].Value;
				_restaurantId					 = Convert.IsDBNull(command.Parameters["@RestaurantId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RestaurantId"].Value;
				_stateId					 = Convert.IsDBNull(command.Parameters["@StateId"].Value) ? (byte?)null : (byte?)command.Parameters["@StateId"].Value;

			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table RestaurantMenu
		///</Summary>
		///<returns>
		///IList-DAORestaurantMenu.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAORestaurantMenu> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RestaurantMenu");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectAll returned error code: " + errorCode );

				List<DAORestaurantMenu> objList = new List<DAORestaurantMenu>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORestaurantMenu retObj = new DAORestaurantMenu();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._restaurantId					 = Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"];
						retObj._stateId					 = Convert.IsDBNull(row["StateId"]) ? (byte?)null : (byte?)row["StateId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectAllCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiRestaurantMenu
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRestaurantMenu_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RestaurantMenu");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectAllByCriteriaProjection returned error code: " + errorCode );

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "Id", true) == 0) lst.Add(Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"]);
						if (string.Compare(projection.Member, "RestaurantId", true) == 0) lst.Add(Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"]);
						if (string.Compare(projection.Member, "StateId", true) == 0) lst.Add(Convert.IsDBNull(row["StateId"]) ? (byte?)null : (byte?)row["StateId"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api RestaurantMenu
		///</Summary>
		///<returns>
		///IList-DAORestaurantMenu.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAORestaurantMenu> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRestaurantMenu_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("RestaurantMenu");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectAllByCriteria returned error code: " + errorCode );

				List<DAORestaurantMenu> objList = new List<DAORestaurantMenu>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAORestaurantMenu retObj = new DAORestaurantMenu();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Int32?)null : (Int32?)row["Id"];
						retObj._restaurantId					 = Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"];
						retObj._stateId					 = Convert.IsDBNull(row["StateId"]) ? (byte?)null : (byte?)row["StateId"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api RestaurantMenu
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprRestaurantMenu_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_SelectAllByCriteriaCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table RestaurantMenu based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprRestaurantMenu_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Id", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@StateId", SqlDbType.TinyInt, 1, ParameterDirection.InputOutput, false, 3, 0, "", DataRowVersion.Proposed, (object)_stateId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprRestaurantMenu_UpdateOne returned error code: " + _errorCode );

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Id"].Value;
				_restaurantId					 = Convert.IsDBNull(command.Parameters["@RestaurantId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RestaurantId"].Value;
				_stateId					 = Convert.IsDBNull(command.Parameters["@StateId"].Value) ? (byte?)null : (byte?)command.Parameters["@StateId"].Value;

			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public Int32? RestaurantId
		{
			get
			{
				return _restaurantId;
			}
			set
			{
				_restaurantId = value;
			}
		}

		public byte? StateId
		{
			get
			{
				return _stateId;
			}
			set
			{
				_stateId = value;
			}
		}

		public Int32? ErrorCode
		{
			get
			{
				return _errorCode;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace AAF.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprRestaurantMenu_SelectOne = @"
			-- Select one row based on the primary key(s)
			SET NOCOUNT ON
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[Id]
			,[RestaurantId]
			,[StateId]
			FROM [administrator].[RestaurantMenu]
			WHERE 
			[Id] = @Id
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			SET NOCOUNT ON
			-- delete all matching from the table
			-- returning the error code if any
			DELETE [administrator].[RestaurantMenu]
			WHERE 
			[Id] = @Id
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_SelectAllByRestaurantId = @"
			-- Select all rows based on a foreign key
			SET NOCOUNT ON
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[Id]
			,[RestaurantId]
			,[StateId]
			FROM [administrator].[RestaurantMenu]
			WHERE 
			[RestaurantId] = @RestaurantId OR ([RestaurantId] IS NULL AND @RestaurantId IS NULL)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_SelectAllByRestaurantIdCount = @"
			-- Get count of rows returnable by this query
			SET NOCOUNT ON
			-- selects count of all rows from the table
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [administrator].[RestaurantMenu]
			WHERE 
			[RestaurantId] = @RestaurantId OR ([RestaurantId] IS NULL AND @RestaurantId IS NULL)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_DeleteAllByRestaurantId = @"
			
			SET NOCOUNT ON
			-- delete all matching from the table
			-- returning the error code if any
			DELETE [administrator].[RestaurantMenu]
			WHERE 
			[RestaurantId] = @RestaurantId OR ([RestaurantId] IS NULL AND @RestaurantId IS NULL)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_InsertOne = @"
			-- Insert a new row
			SET NOCOUNT ON
			-- inserts a new row into the table
			-- returning the error code if any, and the identity field, if any
			INSERT [administrator].[RestaurantMenu]
			(
			[RestaurantId]
			,[StateId]
			)
			VALUES
			(
			@RestaurantId
			,@StateId
			)
			SELECT 
			@Id = [Id]
			,@RestaurantId = [RestaurantId]
			,@StateId = [StateId]
			FROM [administrator].[RestaurantMenu]
			WHERE 
			[Id] = SCOPE_IDENTITY()
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_SelectAll = @"
			-- Select All rows
			SET NOCOUNT ON
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[Id]
			,[RestaurantId]
			,[StateId]
			FROM [administrator].[RestaurantMenu]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_SelectAllCount = @"
			
			SET NOCOUNT ON
			-- selects count of all rows from the table
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [administrator].[RestaurantMenu]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_SelectAllByCriteriaProjection = @"
			
			SET NOCOUNT ON
			-- selects all rows from the table by criteria
			-- returning the error code if any
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [administrator].[RestaurantMenu]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_SelectAllByCriteria = @"
			
			SET NOCOUNT ON
			-- selects all rows from the table by criteria
			-- returning the error code if any
			SELECT 
			[Id]
			,[RestaurantId]
			,[StateId]
			FROM [administrator].[RestaurantMenu]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_SelectAllByCriteriaCount = @"
			
			SET NOCOUNT ON
			-- selects count of all rows from the table according to criteria
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [administrator].[RestaurantMenu]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprRestaurantMenu_UpdateOne = @"
			-- Update one row based on the primary key(s)
			SET NOCOUNT ON
			-- updates a row in the table based on the primary key
			-- returning the error code if any, and the identity field, if any
			
			UPDATE [administrator].[RestaurantMenu]
			SET
			[RestaurantId] = @RestaurantId
			,[StateId] = @StateId
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@RestaurantId = [RestaurantId]
			,@StateId = [StateId]
			FROM [administrator].[RestaurantMenu]
			WHERE 
			[Id] = @Id
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

	}
}
#endregion
