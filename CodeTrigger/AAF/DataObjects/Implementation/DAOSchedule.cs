/*************************************************************
** Class generated by CodeTrigger, Version 6.3.0.4
** This class was generated on 2020-08-01 3:54:27 AM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using AAF.DataObjects.Interfaces;

namespace AAF.DataObjects
{
	public partial class DAOSchedule : zAAFConn_BaseData
	{
		#region member variables
		protected Int32? _restaurantId;
		protected Int32? _mondayStart;
		protected Int32? _mondayEnd;
		protected Int32? _tuesdayStart;
		protected Int32? _tuesdayEnd;
		protected Int32? _wednesdayStart;
		protected Int32? _wednesdayEnd;
		protected Int32? _thursdayStart;
		protected Int32? _thursdayEnd;
		protected Int32? _fridayStart;
		protected Int32? _fridayEnd;
		protected Int32? _saturdayStart;
		protected Int32? _saturdayEnd;
		protected Int32? _sundayStart;
		protected Int32? _sundayEnd;
		protected Int32? _errorCode;
		#endregion

		#region class methods
		public DAOSchedule()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Schedule based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOSchedule
		///</returns>
		///<parameters>
		///Int32? restaurantId
		///</parameters>
		public static DAOSchedule SelectOne(Int32? restaurantId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Schedule");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectOne returned error code: " + errorCode );

				DAOSchedule retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOSchedule();
					retObj._restaurantId					 = Convert.IsDBNull(dt.Rows[0]["RestaurantId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RestaurantId"];
					retObj._mondayStart					 = Convert.IsDBNull(dt.Rows[0]["MondayStart"]) ? (Int32?)null : (Int32?)dt.Rows[0]["MondayStart"];
					retObj._mondayEnd					 = Convert.IsDBNull(dt.Rows[0]["MondayEnd"]) ? (Int32?)null : (Int32?)dt.Rows[0]["MondayEnd"];
					retObj._tuesdayStart					 = Convert.IsDBNull(dt.Rows[0]["TuesdayStart"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TuesdayStart"];
					retObj._tuesdayEnd					 = Convert.IsDBNull(dt.Rows[0]["TuesdayEnd"]) ? (Int32?)null : (Int32?)dt.Rows[0]["TuesdayEnd"];
					retObj._wednesdayStart					 = Convert.IsDBNull(dt.Rows[0]["WednesdayStart"]) ? (Int32?)null : (Int32?)dt.Rows[0]["WednesdayStart"];
					retObj._wednesdayEnd					 = Convert.IsDBNull(dt.Rows[0]["WednesdayEnd"]) ? (Int32?)null : (Int32?)dt.Rows[0]["WednesdayEnd"];
					retObj._thursdayStart					 = Convert.IsDBNull(dt.Rows[0]["ThursdayStart"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ThursdayStart"];
					retObj._thursdayEnd					 = Convert.IsDBNull(dt.Rows[0]["ThursdayEnd"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ThursdayEnd"];
					retObj._fridayStart					 = Convert.IsDBNull(dt.Rows[0]["FridayStart"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FridayStart"];
					retObj._fridayEnd					 = Convert.IsDBNull(dt.Rows[0]["FridayEnd"]) ? (Int32?)null : (Int32?)dt.Rows[0]["FridayEnd"];
					retObj._saturdayStart					 = Convert.IsDBNull(dt.Rows[0]["SaturdayStart"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SaturdayStart"];
					retObj._saturdayEnd					 = Convert.IsDBNull(dt.Rows[0]["SaturdayEnd"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SaturdayEnd"];
					retObj._sundayStart					 = Convert.IsDBNull(dt.Rows[0]["SundayStart"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SundayStart"];
					retObj._sundayEnd					 = Convert.IsDBNull(dt.Rows[0]["SundayEnd"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SundayEnd"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Schedule based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprSchedule_DeleteOne returned error code: " + _errorCode );

			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Schedule based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOSchedule.
		///</returns>
		///<parameters>
		///Int32? restaurantId
		///</parameters>
		public static IList<DAOSchedule> SelectAllByRestaurantId(Int32? restaurantId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_SelectAllByRestaurantId;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Schedule");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectAllByRestaurantId returned error code: " + errorCode );

				List<DAOSchedule> objList = new List<DAOSchedule>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSchedule retObj = new DAOSchedule();
						retObj._restaurantId					 = Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"];
						retObj._mondayStart					 = Convert.IsDBNull(row["MondayStart"]) ? (Int32?)null : (Int32?)row["MondayStart"];
						retObj._mondayEnd					 = Convert.IsDBNull(row["MondayEnd"]) ? (Int32?)null : (Int32?)row["MondayEnd"];
						retObj._tuesdayStart					 = Convert.IsDBNull(row["TuesdayStart"]) ? (Int32?)null : (Int32?)row["TuesdayStart"];
						retObj._tuesdayEnd					 = Convert.IsDBNull(row["TuesdayEnd"]) ? (Int32?)null : (Int32?)row["TuesdayEnd"];
						retObj._wednesdayStart					 = Convert.IsDBNull(row["WednesdayStart"]) ? (Int32?)null : (Int32?)row["WednesdayStart"];
						retObj._wednesdayEnd					 = Convert.IsDBNull(row["WednesdayEnd"]) ? (Int32?)null : (Int32?)row["WednesdayEnd"];
						retObj._thursdayStart					 = Convert.IsDBNull(row["ThursdayStart"]) ? (Int32?)null : (Int32?)row["ThursdayStart"];
						retObj._thursdayEnd					 = Convert.IsDBNull(row["ThursdayEnd"]) ? (Int32?)null : (Int32?)row["ThursdayEnd"];
						retObj._fridayStart					 = Convert.IsDBNull(row["FridayStart"]) ? (Int32?)null : (Int32?)row["FridayStart"];
						retObj._fridayEnd					 = Convert.IsDBNull(row["FridayEnd"]) ? (Int32?)null : (Int32?)row["FridayEnd"];
						retObj._saturdayStart					 = Convert.IsDBNull(row["SaturdayStart"]) ? (Int32?)null : (Int32?)row["SaturdayStart"];
						retObj._saturdayEnd					 = Convert.IsDBNull(row["SaturdayEnd"]) ? (Int32?)null : (Int32?)row["SaturdayEnd"];
						retObj._sundayStart					 = Convert.IsDBNull(row["SundayStart"]) ? (Int32?)null : (Int32?)row["SundayStart"];
						retObj._sundayEnd					 = Convert.IsDBNull(row["SundayEnd"]) ? (Int32?)null : (Int32?)row["SundayEnd"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? restaurantId
		///</parameters>
		public static Int32 SelectAllByRestaurantIdCount(Int32? restaurantId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_SelectAllByRestaurantIdCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectAllByRestaurantIdCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Schedule with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zAAFConn_TxConnectionProvider connectionProvider, Int32? restaurantId
		///</parameters>
		public static void DeleteAllByRestaurantId(zAAFConn_TxConnectionProvider connectionProvider, Int32? restaurantId)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_DeleteAllByRestaurantId;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				command.ExecuteNonQuery();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_DeleteAllByRestaurantId returned error code: " + errorCode );

			}
			catch(Exception ex)
			{
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Schedule
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MondayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_mondayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MondayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_mondayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TuesdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_tuesdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TuesdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_tuesdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WednesdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_wednesdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WednesdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_wednesdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ThursdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_thursdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ThursdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_thursdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FridayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_fridayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FridayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_fridayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SaturdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_saturdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SaturdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_saturdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SundayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_sundayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SundayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_sundayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprSchedule_InsertOne returned error code: " + _errorCode );

				_restaurantId					 = Convert.IsDBNull(command.Parameters["@RestaurantId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RestaurantId"].Value;
				_mondayStart					 = Convert.IsDBNull(command.Parameters["@MondayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@MondayStart"].Value;
				_mondayEnd					 = Convert.IsDBNull(command.Parameters["@MondayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@MondayEnd"].Value;
				_tuesdayStart					 = Convert.IsDBNull(command.Parameters["@TuesdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TuesdayStart"].Value;
				_tuesdayEnd					 = Convert.IsDBNull(command.Parameters["@TuesdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TuesdayEnd"].Value;
				_wednesdayStart					 = Convert.IsDBNull(command.Parameters["@WednesdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@WednesdayStart"].Value;
				_wednesdayEnd					 = Convert.IsDBNull(command.Parameters["@WednesdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@WednesdayEnd"].Value;
				_thursdayStart					 = Convert.IsDBNull(command.Parameters["@ThursdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ThursdayStart"].Value;
				_thursdayEnd					 = Convert.IsDBNull(command.Parameters["@ThursdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ThursdayEnd"].Value;
				_fridayStart					 = Convert.IsDBNull(command.Parameters["@FridayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FridayStart"].Value;
				_fridayEnd					 = Convert.IsDBNull(command.Parameters["@FridayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FridayEnd"].Value;
				_saturdayStart					 = Convert.IsDBNull(command.Parameters["@SaturdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SaturdayStart"].Value;
				_saturdayEnd					 = Convert.IsDBNull(command.Parameters["@SaturdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SaturdayEnd"].Value;
				_sundayStart					 = Convert.IsDBNull(command.Parameters["@SundayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SundayStart"].Value;
				_sundayEnd					 = Convert.IsDBNull(command.Parameters["@SundayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SundayEnd"].Value;

			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Schedule
		///</Summary>
		///<returns>
		///IList-DAOSchedule.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOSchedule> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Schedule");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectAll returned error code: " + errorCode );

				List<DAOSchedule> objList = new List<DAOSchedule>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSchedule retObj = new DAOSchedule();
						retObj._restaurantId					 = Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"];
						retObj._mondayStart					 = Convert.IsDBNull(row["MondayStart"]) ? (Int32?)null : (Int32?)row["MondayStart"];
						retObj._mondayEnd					 = Convert.IsDBNull(row["MondayEnd"]) ? (Int32?)null : (Int32?)row["MondayEnd"];
						retObj._tuesdayStart					 = Convert.IsDBNull(row["TuesdayStart"]) ? (Int32?)null : (Int32?)row["TuesdayStart"];
						retObj._tuesdayEnd					 = Convert.IsDBNull(row["TuesdayEnd"]) ? (Int32?)null : (Int32?)row["TuesdayEnd"];
						retObj._wednesdayStart					 = Convert.IsDBNull(row["WednesdayStart"]) ? (Int32?)null : (Int32?)row["WednesdayStart"];
						retObj._wednesdayEnd					 = Convert.IsDBNull(row["WednesdayEnd"]) ? (Int32?)null : (Int32?)row["WednesdayEnd"];
						retObj._thursdayStart					 = Convert.IsDBNull(row["ThursdayStart"]) ? (Int32?)null : (Int32?)row["ThursdayStart"];
						retObj._thursdayEnd					 = Convert.IsDBNull(row["ThursdayEnd"]) ? (Int32?)null : (Int32?)row["ThursdayEnd"];
						retObj._fridayStart					 = Convert.IsDBNull(row["FridayStart"]) ? (Int32?)null : (Int32?)row["FridayStart"];
						retObj._fridayEnd					 = Convert.IsDBNull(row["FridayEnd"]) ? (Int32?)null : (Int32?)row["FridayEnd"];
						retObj._saturdayStart					 = Convert.IsDBNull(row["SaturdayStart"]) ? (Int32?)null : (Int32?)row["SaturdayStart"];
						retObj._saturdayEnd					 = Convert.IsDBNull(row["SaturdayEnd"]) ? (Int32?)null : (Int32?)row["SaturdayEnd"];
						retObj._sundayStart					 = Convert.IsDBNull(row["SundayStart"]) ? (Int32?)null : (Int32?)row["SundayStart"];
						retObj._sundayEnd					 = Convert.IsDBNull(row["SundayEnd"]) ? (Int32?)null : (Int32?)row["SundayEnd"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectAllCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiSchedule
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSchedule_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Schedule");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectAllByCriteriaProjection returned error code: " + errorCode );

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "RestaurantId", true) == 0) lst.Add(Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"]);
						if (string.Compare(projection.Member, "MondayStart", true) == 0) lst.Add(Convert.IsDBNull(row["MondayStart"]) ? (Int32?)null : (Int32?)row["MondayStart"]);
						if (string.Compare(projection.Member, "MondayEnd", true) == 0) lst.Add(Convert.IsDBNull(row["MondayEnd"]) ? (Int32?)null : (Int32?)row["MondayEnd"]);
						if (string.Compare(projection.Member, "TuesdayStart", true) == 0) lst.Add(Convert.IsDBNull(row["TuesdayStart"]) ? (Int32?)null : (Int32?)row["TuesdayStart"]);
						if (string.Compare(projection.Member, "TuesdayEnd", true) == 0) lst.Add(Convert.IsDBNull(row["TuesdayEnd"]) ? (Int32?)null : (Int32?)row["TuesdayEnd"]);
						if (string.Compare(projection.Member, "WednesdayStart", true) == 0) lst.Add(Convert.IsDBNull(row["WednesdayStart"]) ? (Int32?)null : (Int32?)row["WednesdayStart"]);
						if (string.Compare(projection.Member, "WednesdayEnd", true) == 0) lst.Add(Convert.IsDBNull(row["WednesdayEnd"]) ? (Int32?)null : (Int32?)row["WednesdayEnd"]);
						if (string.Compare(projection.Member, "ThursdayStart", true) == 0) lst.Add(Convert.IsDBNull(row["ThursdayStart"]) ? (Int32?)null : (Int32?)row["ThursdayStart"]);
						if (string.Compare(projection.Member, "ThursdayEnd", true) == 0) lst.Add(Convert.IsDBNull(row["ThursdayEnd"]) ? (Int32?)null : (Int32?)row["ThursdayEnd"]);
						if (string.Compare(projection.Member, "FridayStart", true) == 0) lst.Add(Convert.IsDBNull(row["FridayStart"]) ? (Int32?)null : (Int32?)row["FridayStart"]);
						if (string.Compare(projection.Member, "FridayEnd", true) == 0) lst.Add(Convert.IsDBNull(row["FridayEnd"]) ? (Int32?)null : (Int32?)row["FridayEnd"]);
						if (string.Compare(projection.Member, "SaturdayStart", true) == 0) lst.Add(Convert.IsDBNull(row["SaturdayStart"]) ? (Int32?)null : (Int32?)row["SaturdayStart"]);
						if (string.Compare(projection.Member, "SaturdayEnd", true) == 0) lst.Add(Convert.IsDBNull(row["SaturdayEnd"]) ? (Int32?)null : (Int32?)row["SaturdayEnd"]);
						if (string.Compare(projection.Member, "SundayStart", true) == 0) lst.Add(Convert.IsDBNull(row["SundayStart"]) ? (Int32?)null : (Int32?)row["SundayStart"]);
						if (string.Compare(projection.Member, "SundayEnd", true) == 0) lst.Add(Convert.IsDBNull(row["SundayEnd"]) ? (Int32?)null : (Int32?)row["SundayEnd"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Schedule
		///</Summary>
		///<returns>
		///IList-DAOSchedule.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOSchedule> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSchedule_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Schedule");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectAllByCriteria returned error code: " + errorCode );

				List<DAOSchedule> objList = new List<DAOSchedule>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOSchedule retObj = new DAOSchedule();
						retObj._restaurantId					 = Convert.IsDBNull(row["RestaurantId"]) ? (Int32?)null : (Int32?)row["RestaurantId"];
						retObj._mondayStart					 = Convert.IsDBNull(row["MondayStart"]) ? (Int32?)null : (Int32?)row["MondayStart"];
						retObj._mondayEnd					 = Convert.IsDBNull(row["MondayEnd"]) ? (Int32?)null : (Int32?)row["MondayEnd"];
						retObj._tuesdayStart					 = Convert.IsDBNull(row["TuesdayStart"]) ? (Int32?)null : (Int32?)row["TuesdayStart"];
						retObj._tuesdayEnd					 = Convert.IsDBNull(row["TuesdayEnd"]) ? (Int32?)null : (Int32?)row["TuesdayEnd"];
						retObj._wednesdayStart					 = Convert.IsDBNull(row["WednesdayStart"]) ? (Int32?)null : (Int32?)row["WednesdayStart"];
						retObj._wednesdayEnd					 = Convert.IsDBNull(row["WednesdayEnd"]) ? (Int32?)null : (Int32?)row["WednesdayEnd"];
						retObj._thursdayStart					 = Convert.IsDBNull(row["ThursdayStart"]) ? (Int32?)null : (Int32?)row["ThursdayStart"];
						retObj._thursdayEnd					 = Convert.IsDBNull(row["ThursdayEnd"]) ? (Int32?)null : (Int32?)row["ThursdayEnd"];
						retObj._fridayStart					 = Convert.IsDBNull(row["FridayStart"]) ? (Int32?)null : (Int32?)row["FridayStart"];
						retObj._fridayEnd					 = Convert.IsDBNull(row["FridayEnd"]) ? (Int32?)null : (Int32?)row["FridayEnd"];
						retObj._saturdayStart					 = Convert.IsDBNull(row["SaturdayStart"]) ? (Int32?)null : (Int32?)row["SaturdayStart"];
						retObj._saturdayEnd					 = Convert.IsDBNull(row["SaturdayEnd"]) ? (Int32?)null : (Int32?)row["SaturdayEnd"];
						retObj._sundayStart					 = Convert.IsDBNull(row["SundayStart"]) ? (Int32?)null : (Int32?)row["SundayStart"];
						retObj._sundayEnd					 = Convert.IsDBNull(row["SundayEnd"]) ? (Int32?)null : (Int32?)row["SundayEnd"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Schedule
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprSchedule_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, null));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				int errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(errorCode > 1)
					throw new Exception("procedure ctprSchedule_SelectAllByCriteriaCount returned error code: " + errorCode );

				return retCount;
			}
			catch(Exception ex)
			{
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Schedule based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprSchedule_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RestaurantId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_restaurantId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MondayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_mondayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@MondayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_mondayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TuesdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_tuesdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TuesdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_tuesdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WednesdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_wednesdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@WednesdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_wednesdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ThursdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_thursdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ThursdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_thursdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FridayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_fridayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FridayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_fridayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SaturdayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_saturdayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SaturdayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_saturdayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SundayStart", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_sundayStart?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SundayEnd", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_sundayEnd?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				command.ExecuteNonQuery();

				_errorCode = (Int32)command.Parameters["@ErrorCode"].Value;
				if(_errorCode > 1)
					throw new Exception("procedure ctprSchedule_UpdateOne returned error code: " + _errorCode );

				_restaurantId					 = Convert.IsDBNull(command.Parameters["@RestaurantId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RestaurantId"].Value;
				_mondayStart					 = Convert.IsDBNull(command.Parameters["@MondayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@MondayStart"].Value;
				_mondayEnd					 = Convert.IsDBNull(command.Parameters["@MondayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@MondayEnd"].Value;
				_tuesdayStart					 = Convert.IsDBNull(command.Parameters["@TuesdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TuesdayStart"].Value;
				_tuesdayEnd					 = Convert.IsDBNull(command.Parameters["@TuesdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@TuesdayEnd"].Value;
				_wednesdayStart					 = Convert.IsDBNull(command.Parameters["@WednesdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@WednesdayStart"].Value;
				_wednesdayEnd					 = Convert.IsDBNull(command.Parameters["@WednesdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@WednesdayEnd"].Value;
				_thursdayStart					 = Convert.IsDBNull(command.Parameters["@ThursdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ThursdayStart"].Value;
				_thursdayEnd					 = Convert.IsDBNull(command.Parameters["@ThursdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ThursdayEnd"].Value;
				_fridayStart					 = Convert.IsDBNull(command.Parameters["@FridayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FridayStart"].Value;
				_fridayEnd					 = Convert.IsDBNull(command.Parameters["@FridayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@FridayEnd"].Value;
				_saturdayStart					 = Convert.IsDBNull(command.Parameters["@SaturdayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SaturdayStart"].Value;
				_saturdayEnd					 = Convert.IsDBNull(command.Parameters["@SaturdayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SaturdayEnd"].Value;
				_sundayStart					 = Convert.IsDBNull(command.Parameters["@SundayStart"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SundayStart"].Value;
				_sundayEnd					 = Convert.IsDBNull(command.Parameters["@SundayEnd"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SundayEnd"].Value;

			}
			catch(Exception ex)
			{
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? RestaurantId
		{
			get
			{
				return _restaurantId;
			}
			set
			{
				_restaurantId = value;
			}
		}

		public Int32? MondayStart
		{
			get
			{
				return _mondayStart;
			}
			set
			{
				_mondayStart = value;
			}
		}

		public Int32? MondayEnd
		{
			get
			{
				return _mondayEnd;
			}
			set
			{
				_mondayEnd = value;
			}
		}

		public Int32? TuesdayStart
		{
			get
			{
				return _tuesdayStart;
			}
			set
			{
				_tuesdayStart = value;
			}
		}

		public Int32? TuesdayEnd
		{
			get
			{
				return _tuesdayEnd;
			}
			set
			{
				_tuesdayEnd = value;
			}
		}

		public Int32? WednesdayStart
		{
			get
			{
				return _wednesdayStart;
			}
			set
			{
				_wednesdayStart = value;
			}
		}

		public Int32? WednesdayEnd
		{
			get
			{
				return _wednesdayEnd;
			}
			set
			{
				_wednesdayEnd = value;
			}
		}

		public Int32? ThursdayStart
		{
			get
			{
				return _thursdayStart;
			}
			set
			{
				_thursdayStart = value;
			}
		}

		public Int32? ThursdayEnd
		{
			get
			{
				return _thursdayEnd;
			}
			set
			{
				_thursdayEnd = value;
			}
		}

		public Int32? FridayStart
		{
			get
			{
				return _fridayStart;
			}
			set
			{
				_fridayStart = value;
			}
		}

		public Int32? FridayEnd
		{
			get
			{
				return _fridayEnd;
			}
			set
			{
				_fridayEnd = value;
			}
		}

		public Int32? SaturdayStart
		{
			get
			{
				return _saturdayStart;
			}
			set
			{
				_saturdayStart = value;
			}
		}

		public Int32? SaturdayEnd
		{
			get
			{
				return _saturdayEnd;
			}
			set
			{
				_saturdayEnd = value;
			}
		}

		public Int32? SundayStart
		{
			get
			{
				return _sundayStart;
			}
			set
			{
				_sundayStart = value;
			}
		}

		public Int32? SundayEnd
		{
			get
			{
				return _sundayEnd;
			}
			set
			{
				_sundayEnd = value;
			}
		}

		public Int32? ErrorCode
		{
			get
			{
				return _errorCode;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace AAF.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprSchedule_SelectOne = @"
			-- Select one row based on the primary key(s)
			SET NOCOUNT ON
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[RestaurantId]
			,[MondayStart]
			,[MondayEnd]
			,[TuesdayStart]
			,[TuesdayEnd]
			,[WednesdayStart]
			,[WednesdayEnd]
			,[ThursdayStart]
			,[ThursdayEnd]
			,[FridayStart]
			,[FridayEnd]
			,[SaturdayStart]
			,[SaturdayEnd]
			,[SundayStart]
			,[SundayEnd]
			FROM [administrator].[Schedule]
			WHERE 
			[RestaurantId] = @RestaurantId
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			SET NOCOUNT ON
			-- delete all matching from the table
			-- returning the error code if any
			DELETE [administrator].[Schedule]
			WHERE 
			[RestaurantId] = @RestaurantId
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_SelectAllByRestaurantId = @"
			-- Select all rows based on a foreign key
			SET NOCOUNT ON
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[RestaurantId]
			,[MondayStart]
			,[MondayEnd]
			,[TuesdayStart]
			,[TuesdayEnd]
			,[WednesdayStart]
			,[WednesdayEnd]
			,[ThursdayStart]
			,[ThursdayEnd]
			,[FridayStart]
			,[FridayEnd]
			,[SaturdayStart]
			,[SaturdayEnd]
			,[SundayStart]
			,[SundayEnd]
			FROM [administrator].[Schedule]
			WHERE 
			[RestaurantId] = @RestaurantId OR ([RestaurantId] IS NULL AND @RestaurantId IS NULL)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_SelectAllByRestaurantIdCount = @"
			-- Get count of rows returnable by this query
			SET NOCOUNT ON
			-- selects count of all rows from the table
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [administrator].[Schedule]
			WHERE 
			[RestaurantId] = @RestaurantId OR ([RestaurantId] IS NULL AND @RestaurantId IS NULL)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_DeleteAllByRestaurantId = @"
			
			SET NOCOUNT ON
			-- delete all matching from the table
			-- returning the error code if any
			DELETE [administrator].[Schedule]
			WHERE 
			[RestaurantId] = @RestaurantId OR ([RestaurantId] IS NULL AND @RestaurantId IS NULL)
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_InsertOne = @"
			-- Insert a new row
			SET NOCOUNT ON
			-- inserts a new row into the table
			-- returning the error code if any, and the identity field, if any
			INSERT [administrator].[Schedule]
			(
			[RestaurantId]
			,[MondayStart]
			,[MondayEnd]
			,[TuesdayStart]
			,[TuesdayEnd]
			,[WednesdayStart]
			,[WednesdayEnd]
			,[ThursdayStart]
			,[ThursdayEnd]
			,[FridayStart]
			,[FridayEnd]
			,[SaturdayStart]
			,[SaturdayEnd]
			,[SundayStart]
			,[SundayEnd]
			)
			VALUES
			(
			@RestaurantId
			,@MondayStart
			,@MondayEnd
			,@TuesdayStart
			,@TuesdayEnd
			,@WednesdayStart
			,@WednesdayEnd
			,@ThursdayStart
			,@ThursdayEnd
			,@FridayStart
			,@FridayEnd
			,@SaturdayStart
			,@SaturdayEnd
			,@SundayStart
			,@SundayEnd
			)
			SELECT 
			@RestaurantId = [RestaurantId]
			,@MondayStart = [MondayStart]
			,@MondayEnd = [MondayEnd]
			,@TuesdayStart = [TuesdayStart]
			,@TuesdayEnd = [TuesdayEnd]
			,@WednesdayStart = [WednesdayStart]
			,@WednesdayEnd = [WednesdayEnd]
			,@ThursdayStart = [ThursdayStart]
			,@ThursdayEnd = [ThursdayEnd]
			,@FridayStart = [FridayStart]
			,@FridayEnd = [FridayEnd]
			,@SaturdayStart = [SaturdayStart]
			,@SaturdayEnd = [SaturdayEnd]
			,@SundayStart = [SundayStart]
			,@SundayEnd = [SundayEnd]
			FROM [administrator].[Schedule]
			WHERE 
			[RestaurantId] = @RestaurantId
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_SelectAll = @"
			-- Select All rows
			SET NOCOUNT ON
			-- selects all rows from the table
			-- returning the error code if any
			SELECT 
			[RestaurantId]
			,[MondayStart]
			,[MondayEnd]
			,[TuesdayStart]
			,[TuesdayEnd]
			,[WednesdayStart]
			,[WednesdayEnd]
			,[ThursdayStart]
			,[ThursdayEnd]
			,[FridayStart]
			,[FridayEnd]
			,[SaturdayStart]
			,[SaturdayEnd]
			,[SundayStart]
			,[SundayEnd]
			FROM [administrator].[Schedule]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_SelectAllCount = @"
			
			SET NOCOUNT ON
			-- selects count of all rows from the table
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [administrator].[Schedule]
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_SelectAllByCriteriaProjection = @"
			
			SET NOCOUNT ON
			-- selects all rows from the table by criteria
			-- returning the error code if any
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [administrator].[Schedule]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_SelectAllByCriteria = @"
			
			SET NOCOUNT ON
			-- selects all rows from the table by criteria
			-- returning the error code if any
			SELECT 
			[RestaurantId]
			,[MondayStart]
			,[MondayEnd]
			,[TuesdayStart]
			,[TuesdayEnd]
			,[WednesdayStart]
			,[WednesdayEnd]
			,[ThursdayStart]
			,[ThursdayEnd]
			,[FridayStart]
			,[FridayEnd]
			,[SaturdayStart]
			,[SaturdayEnd]
			,[SundayStart]
			,[SundayEnd]
			FROM [administrator].[Schedule]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_SelectAllByCriteriaCount = @"
			
			SET NOCOUNT ON
			-- selects count of all rows from the table according to criteria
			-- returning the error code if any
			SELECT COUNT(*)
			FROM [administrator].[Schedule]
			##CRITERIA##
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

		internal static string ctprSchedule_UpdateOne = @"
			-- Update one row based on the primary key(s)
			SET NOCOUNT ON
			-- updates a row in the table based on the primary key
			-- returning the error code if any, and the identity field, if any
			
			UPDATE [administrator].[Schedule]
			SET
			[MondayStart] = @MondayStart
			,[MondayEnd] = @MondayEnd
			,[TuesdayStart] = @TuesdayStart
			,[TuesdayEnd] = @TuesdayEnd
			,[WednesdayStart] = @WednesdayStart
			,[WednesdayEnd] = @WednesdayEnd
			,[ThursdayStart] = @ThursdayStart
			,[ThursdayEnd] = @ThursdayEnd
			,[FridayStart] = @FridayStart
			,[FridayEnd] = @FridayEnd
			,[SaturdayStart] = @SaturdayStart
			,[SaturdayEnd] = @SaturdayEnd
			,[SundayStart] = @SundayStart
			,[SundayEnd] = @SundayEnd
			WHERE 
			[RestaurantId] = @RestaurantId
			SELECT 
			@RestaurantId = [RestaurantId]
			,@MondayStart = [MondayStart]
			,@MondayEnd = [MondayEnd]
			,@TuesdayStart = [TuesdayStart]
			,@TuesdayEnd = [TuesdayEnd]
			,@WednesdayStart = [WednesdayStart]
			,@WednesdayEnd = [WednesdayEnd]
			,@ThursdayStart = [ThursdayStart]
			,@ThursdayEnd = [ThursdayEnd]
			,@FridayStart = [FridayStart]
			,@FridayEnd = [FridayEnd]
			,@SaturdayStart = [SaturdayStart]
			,@SaturdayEnd = [SaturdayEnd]
			,@SundayStart = [SundayStart]
			,@SundayEnd = [SundayEnd]
			FROM [administrator].[Schedule]
			WHERE 
			[RestaurantId] = @RestaurantId
			-- returning the error code if any
			SELECT @ErrorCode = @@ERROR
			";

	}
}
#endregion
