// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/dictionaries.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Saas.Dictionary {

  /// <summary>Holder for reflection information generated from Protos/dictionaries.proto</summary>
  public static partial class DictionariesReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/dictionaries.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DictionariesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90b3MvZGljdGlvbmFyaWVzLnByb3RvEgpEaWN0aW9uYXJ5IpEBCgRL",
            "ZXlzEiQKBnZhbHVlcxgBIAMoCzIULkRpY3Rpb25hcnkuS2V5cy5LZXkaYwoD",
            "S2V5EgsKA2tleRgBIAEoBRIOCgZyb290SWQYAiABKAUSEQoJb2JqZWN0X2lk",
            "GAMgASgFEgoKAmlkGAQgASgFEhIKCmxhbmd1YWdlSWQYBSABKAUSDAoEY29k",
            "ZRgGIAEoCSJjCgZWYWx1ZXMSKAoGdmFsdWVzGAEgAygLMhguRGljdGlvbmFy",
            "eS5WYWx1ZXMuVmFsdWUaLwoFVmFsdWUSCwoDa2V5GAEgASgFEgwKBHR5cGUY",
            "AiABKAUSCwoDdmFsGAMgASgJIm0KCEtleVR5cGVzEiwKBnZhbHVlcxgBIAMo",
            "CzIcLkRpY3Rpb25hcnkuS2V5VHlwZXMuS2V5VHlwZRozCgdLZXlUeXBlEgoK",
            "AmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDgoGbWF4bGVuGAMgASgFQhKqAg9T",
            "YWFzLkRpY3Rpb25hcnliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Dictionary.Keys), global::Saas.Dictionary.Keys.Parser, new[]{ "Values" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Dictionary.Keys.Types.Key), global::Saas.Dictionary.Keys.Types.Key.Parser, new[]{ "Key_", "RootId", "ObjectId", "Id", "LanguageId", "Code" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Dictionary.Values), global::Saas.Dictionary.Values.Parser, new[]{ "Values_" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Dictionary.Values.Types.Value), global::Saas.Dictionary.Values.Types.Value.Parser, new[]{ "Key", "Type", "Val" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Dictionary.KeyTypes), global::Saas.Dictionary.KeyTypes.Parser, new[]{ "Values" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Dictionary.KeyTypes.Types.KeyType), global::Saas.Dictionary.KeyTypes.Types.KeyType.Parser, new[]{ "Id", "Name", "Maxlen" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Keys : pb::IMessage<Keys> {
    private static readonly pb::MessageParser<Keys> _parser = new pb::MessageParser<Keys>(() => new Keys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Keys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saas.Dictionary.DictionariesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys(Keys other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys Clone() {
      return new Keys(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Saas.Dictionary.Keys.Types.Key> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Saas.Dictionary.Keys.Types.Key.Parser);
    private readonly pbc::RepeatedField<global::Saas.Dictionary.Keys.Types.Key> values_ = new pbc::RepeatedField<global::Saas.Dictionary.Keys.Types.Key>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saas.Dictionary.Keys.Types.Key> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Keys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Keys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Keys other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Keys message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Key : pb::IMessage<Key> {
        private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Key> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saas.Dictionary.Keys.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key(Key other) : this() {
          key_ = other.key_;
          rootId_ = other.rootId_;
          objectId_ = other.objectId_;
          id_ = other.id_;
          languageId_ = other.languageId_;
          code_ = other.code_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key Clone() {
          return new Key(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int Key_FieldNumber = 1;
        private int key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Key_ {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "rootId" field.</summary>
        public const int RootIdFieldNumber = 2;
        private int rootId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RootId {
          get { return rootId_; }
          set {
            rootId_ = value;
          }
        }

        /// <summary>Field number for the "object_id" field.</summary>
        public const int ObjectIdFieldNumber = 3;
        private int objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 4;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "languageId" field.</summary>
        public const int LanguageIdFieldNumber = 5;
        private int languageId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LanguageId {
          get { return languageId_; }
          set {
            languageId_ = value;
          }
        }

        /// <summary>Field number for the "code" field.</summary>
        public const int CodeFieldNumber = 6;
        private string code_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Code {
          get { return code_; }
          set {
            code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Key);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Key other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key_ != other.Key_) return false;
          if (RootId != other.RootId) return false;
          if (ObjectId != other.ObjectId) return false;
          if (Id != other.Id) return false;
          if (LanguageId != other.LanguageId) return false;
          if (Code != other.Code) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key_ != 0) hash ^= Key_.GetHashCode();
          if (RootId != 0) hash ^= RootId.GetHashCode();
          if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
          if (Id != 0) hash ^= Id.GetHashCode();
          if (LanguageId != 0) hash ^= LanguageId.GetHashCode();
          if (Code.Length != 0) hash ^= Code.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key_ != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Key_);
          }
          if (RootId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(RootId);
          }
          if (ObjectId != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ObjectId);
          }
          if (Id != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Id);
          }
          if (LanguageId != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(LanguageId);
          }
          if (Code.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(Code);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key_);
          }
          if (RootId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RootId);
          }
          if (ObjectId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectId);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (LanguageId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LanguageId);
          }
          if (Code.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Key other) {
          if (other == null) {
            return;
          }
          if (other.Key_ != 0) {
            Key_ = other.Key_;
          }
          if (other.RootId != 0) {
            RootId = other.RootId;
          }
          if (other.ObjectId != 0) {
            ObjectId = other.ObjectId;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.LanguageId != 0) {
            LanguageId = other.LanguageId;
          }
          if (other.Code.Length != 0) {
            Code = other.Code;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key_ = input.ReadInt32();
                break;
              }
              case 16: {
                RootId = input.ReadInt32();
                break;
              }
              case 24: {
                ObjectId = input.ReadInt32();
                break;
              }
              case 32: {
                Id = input.ReadInt32();
                break;
              }
              case 40: {
                LanguageId = input.ReadInt32();
                break;
              }
              case 50: {
                Code = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Values : pb::IMessage<Values> {
    private static readonly pb::MessageParser<Values> _parser = new pb::MessageParser<Values>(() => new Values());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Values> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saas.Dictionary.DictionariesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Values() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Values(Values other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Values Clone() {
      return new Values(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int Values_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Saas.Dictionary.Values.Types.Value> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Saas.Dictionary.Values.Types.Value.Parser);
    private readonly pbc::RepeatedField<global::Saas.Dictionary.Values.Types.Value> values_ = new pbc::RepeatedField<global::Saas.Dictionary.Values.Types.Value>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saas.Dictionary.Values.Types.Value> Values_ {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Values);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Values other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Values other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Values message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Value : pb::IMessage<Value> {
        private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Value> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saas.Dictionary.Values.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Value() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Value(Value other) : this() {
          key_ = other.key_;
          type_ = other.type_;
          val_ = other.val_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Value Clone() {
          return new Value(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private int key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "val" field.</summary>
        public const int ValFieldNumber = 3;
        private string val_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Val {
          get { return val_; }
          set {
            val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Value);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Value other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Type != other.Type) return false;
          if (Val != other.Val) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key != 0) hash ^= Key.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Val.Length != 0) hash ^= Val.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Key);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Type);
          }
          if (Val.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Val);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (Val.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Val);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Value other) {
          if (other == null) {
            return;
          }
          if (other.Key != 0) {
            Key = other.Key;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Val.Length != 0) {
            Val = other.Val;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadInt32();
                break;
              }
              case 16: {
                Type = input.ReadInt32();
                break;
              }
              case 26: {
                Val = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class KeyTypes : pb::IMessage<KeyTypes> {
    private static readonly pb::MessageParser<KeyTypes> _parser = new pb::MessageParser<KeyTypes>(() => new KeyTypes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saas.Dictionary.DictionariesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTypes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTypes(KeyTypes other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyTypes Clone() {
      return new KeyTypes(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Saas.Dictionary.KeyTypes.Types.KeyType> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Saas.Dictionary.KeyTypes.Types.KeyType.Parser);
    private readonly pbc::RepeatedField<global::Saas.Dictionary.KeyTypes.Types.KeyType> values_ = new pbc::RepeatedField<global::Saas.Dictionary.KeyTypes.Types.KeyType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saas.Dictionary.KeyTypes.Types.KeyType> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyTypes other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KeyTypes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class KeyType : pb::IMessage<KeyType> {
        private static readonly pb::MessageParser<KeyType> _parser = new pb::MessageParser<KeyType>(() => new KeyType());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KeyType> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saas.Dictionary.KeyTypes.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyType() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyType(KeyType other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          maxlen_ = other.maxlen_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyType Clone() {
          return new KeyType(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "maxlen" field.</summary>
        public const int MaxlenFieldNumber = 3;
        private int maxlen_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Maxlen {
          get { return maxlen_; }
          set {
            maxlen_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KeyType);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KeyType other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Maxlen != other.Maxlen) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Maxlen != 0) hash ^= Maxlen.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Maxlen != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Maxlen);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Maxlen != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxlen);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KeyType other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Maxlen != 0) {
            Maxlen = other.Maxlen;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Maxlen = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
