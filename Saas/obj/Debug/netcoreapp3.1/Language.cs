// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/language.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Saas.Entity.Language {

  /// <summary>Holder for reflection information generated from Protos/language.proto</summary>
  public static partial class LanguageReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/language.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LanguageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQcm90b3MvbGFuZ3VhZ2UucHJvdG8SCExhbmd1YWdlGhpQcm90b3MvcmVm",
            "ZXJlbmNlRGF0YS5wcm90byKaAQoES2V5cxIiCgZ2YWx1ZXMYASADKAsyEi5M",
            "YW5ndWFnZS5LZXlzLktleRpuCgNLZXkSCwoDS2V5GAEgASgFEgwKBFR5cGUY",
            "AiABKAUSDgoGUm9vdElkGAMgASgFEhEKCU9iamVjdF9pZBgEIAEoBRIKCgJJ",
            "ZBgFIAEoBRIPCgdLZXlOYW1lGAYgASgJEgwKBENvZGUYByABKAkiqQEKCkRp",
            "Y3Rpb25hcnkSDgoGUm9vdElkGAEgASgFEkAKCExhbmd1YWdlGAIgASgLMi4u",
            "UmVmZXJlbmNlRGF0YS5TdXBwb3J0ZWRMYW5ndWFnZXMuQ29kZUxhbmd1YWdl",
            "EhwKBEtleXMYAyABKAsyDi5MYW5ndWFnZS5LZXlzEisKB2NvbnRlbnQYBCAD",
            "KAsyGi5MYW5ndWFnZS5EaWN0S2V5VmFsdWVQYWlyIiwKEERpY3RLZXlWYWx1",
            "ZVBhaXISCwoDS2V5GAEgASgFEgsKA1ZhbBgCIAEoCUIXqgIUU2Fhcy5FbnRp",
            "dHkuTGFuZ3VhZ2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Saas.Entity.ReferenceData.ReferenceDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Entity.Language.Keys), global::Saas.Entity.Language.Keys.Parser, new[]{ "Values" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Entity.Language.Keys.Types.Key), global::Saas.Entity.Language.Keys.Types.Key.Parser, new[]{ "Key_", "Type", "RootId", "ObjectId", "Id", "KeyName", "Code" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Entity.Language.Dictionary), global::Saas.Entity.Language.Dictionary.Parser, new[]{ "RootId", "Language", "Keys", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Saas.Entity.Language.DictKeyValuePair), global::Saas.Entity.Language.DictKeyValuePair.Parser, new[]{ "Key", "Val" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Keys : pb::IMessage<Keys> {
    private static readonly pb::MessageParser<Keys> _parser = new pb::MessageParser<Keys>(() => new Keys());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Keys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saas.Entity.Language.LanguageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys(Keys other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keys Clone() {
      return new Keys(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Saas.Entity.Language.Keys.Types.Key> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Saas.Entity.Language.Keys.Types.Key.Parser);
    private readonly pbc::RepeatedField<global::Saas.Entity.Language.Keys.Types.Key> values_ = new pbc::RepeatedField<global::Saas.Entity.Language.Keys.Types.Key>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saas.Entity.Language.Keys.Types.Key> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Keys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Keys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Keys other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Keys message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Key : pb::IMessage<Key> {
        private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Key> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Saas.Entity.Language.Keys.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key(Key other) : this() {
          key_ = other.key_;
          type_ = other.type_;
          rootId_ = other.rootId_;
          objectId_ = other.objectId_;
          id_ = other.id_;
          keyName_ = other.keyName_;
          code_ = other.code_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key Clone() {
          return new Key(this);
        }

        /// <summary>Field number for the "Key" field.</summary>
        public const int Key_FieldNumber = 1;
        private int key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Key_ {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "Type" field.</summary>
        public const int TypeFieldNumber = 2;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "RootId" field.</summary>
        public const int RootIdFieldNumber = 3;
        private int rootId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RootId {
          get { return rootId_; }
          set {
            rootId_ = value;
          }
        }

        /// <summary>Field number for the "Object_id" field.</summary>
        public const int ObjectIdFieldNumber = 4;
        private int objectId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ObjectId {
          get { return objectId_; }
          set {
            objectId_ = value;
          }
        }

        /// <summary>Field number for the "Id" field.</summary>
        public const int IdFieldNumber = 5;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "KeyName" field.</summary>
        public const int KeyNameFieldNumber = 6;
        private string keyName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyName {
          get { return keyName_; }
          set {
            keyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Code" field.</summary>
        public const int CodeFieldNumber = 7;
        private string code_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Code {
          get { return code_; }
          set {
            code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Key);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Key other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key_ != other.Key_) return false;
          if (Type != other.Type) return false;
          if (RootId != other.RootId) return false;
          if (ObjectId != other.ObjectId) return false;
          if (Id != other.Id) return false;
          if (KeyName != other.KeyName) return false;
          if (Code != other.Code) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key_ != 0) hash ^= Key_.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (RootId != 0) hash ^= RootId.GetHashCode();
          if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
          if (Id != 0) hash ^= Id.GetHashCode();
          if (KeyName.Length != 0) hash ^= KeyName.GetHashCode();
          if (Code.Length != 0) hash ^= Code.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key_ != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Key_);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Type);
          }
          if (RootId != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(RootId);
          }
          if (ObjectId != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ObjectId);
          }
          if (Id != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Id);
          }
          if (KeyName.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(KeyName);
          }
          if (Code.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(Code);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key_);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (RootId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RootId);
          }
          if (ObjectId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectId);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (KeyName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyName);
          }
          if (Code.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Key other) {
          if (other == null) {
            return;
          }
          if (other.Key_ != 0) {
            Key_ = other.Key_;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.RootId != 0) {
            RootId = other.RootId;
          }
          if (other.ObjectId != 0) {
            ObjectId = other.ObjectId;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.KeyName.Length != 0) {
            KeyName = other.KeyName;
          }
          if (other.Code.Length != 0) {
            Code = other.Code;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key_ = input.ReadInt32();
                break;
              }
              case 16: {
                Type = input.ReadInt32();
                break;
              }
              case 24: {
                RootId = input.ReadInt32();
                break;
              }
              case 32: {
                ObjectId = input.ReadInt32();
                break;
              }
              case 40: {
                Id = input.ReadInt32();
                break;
              }
              case 50: {
                KeyName = input.ReadString();
                break;
              }
              case 58: {
                Code = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Dictionary : pb::IMessage<Dictionary> {
    private static readonly pb::MessageParser<Dictionary> _parser = new pb::MessageParser<Dictionary>(() => new Dictionary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saas.Entity.Language.LanguageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary(Dictionary other) : this() {
      rootId_ = other.rootId_;
      language_ = other.language_ != null ? other.language_.Clone() : null;
      keys_ = other.keys_ != null ? other.keys_.Clone() : null;
      content_ = other.content_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary Clone() {
      return new Dictionary(this);
    }

    /// <summary>Field number for the "RootId" field.</summary>
    public const int RootIdFieldNumber = 1;
    private int rootId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RootId {
      get { return rootId_; }
      set {
        rootId_ = value;
      }
    }

    /// <summary>Field number for the "Language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private global::Saas.Entity.ReferenceData.SupportedLanguages.Types.CodeLanguage language_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saas.Entity.ReferenceData.SupportedLanguages.Types.CodeLanguage Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "Keys" field.</summary>
    public const int KeysFieldNumber = 3;
    private global::Saas.Entity.Language.Keys keys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Saas.Entity.Language.Keys Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Saas.Entity.Language.DictKeyValuePair> _repeated_content_codec
        = pb::FieldCodec.ForMessage(34, global::Saas.Entity.Language.DictKeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::Saas.Entity.Language.DictKeyValuePair> content_ = new pbc::RepeatedField<global::Saas.Entity.Language.DictKeyValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Saas.Entity.Language.DictKeyValuePair> Content {
      get { return content_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootId != other.RootId) return false;
      if (!object.Equals(Language, other.Language)) return false;
      if (!object.Equals(Keys, other.Keys)) return false;
      if(!content_.Equals(other.content_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootId != 0) hash ^= RootId.GetHashCode();
      if (language_ != null) hash ^= Language.GetHashCode();
      if (keys_ != null) hash ^= Keys.GetHashCode();
      hash ^= content_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RootId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RootId);
      }
      if (language_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Language);
      }
      if (keys_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Keys);
      }
      content_.WriteTo(output, _repeated_content_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RootId);
      }
      if (language_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Language);
      }
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      size += content_.CalculateSize(_repeated_content_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dictionary other) {
      if (other == null) {
        return;
      }
      if (other.RootId != 0) {
        RootId = other.RootId;
      }
      if (other.language_ != null) {
        if (language_ == null) {
          Language = new global::Saas.Entity.ReferenceData.SupportedLanguages.Types.CodeLanguage();
        }
        Language.MergeFrom(other.Language);
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          Keys = new global::Saas.Entity.Language.Keys();
        }
        Keys.MergeFrom(other.Keys);
      }
      content_.Add(other.content_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RootId = input.ReadInt32();
            break;
          }
          case 18: {
            if (language_ == null) {
              Language = new global::Saas.Entity.ReferenceData.SupportedLanguages.Types.CodeLanguage();
            }
            input.ReadMessage(Language);
            break;
          }
          case 26: {
            if (keys_ == null) {
              Keys = new global::Saas.Entity.Language.Keys();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 34: {
            content_.AddEntriesFrom(input, _repeated_content_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DictKeyValuePair : pb::IMessage<DictKeyValuePair> {
    private static readonly pb::MessageParser<DictKeyValuePair> _parser = new pb::MessageParser<DictKeyValuePair>(() => new DictKeyValuePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DictKeyValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Saas.Entity.Language.LanguageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictKeyValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictKeyValuePair(DictKeyValuePair other) : this() {
      key_ = other.key_;
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictKeyValuePair Clone() {
      return new DictKeyValuePair(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "Val" field.</summary>
    public const int ValFieldNumber = 2;
    private string val_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Val {
      get { return val_; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DictKeyValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DictKeyValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Val.Length != 0) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Val.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Val.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DictKeyValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Val.Length != 0) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 18: {
            Val = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
